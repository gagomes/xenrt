#
# XenRT: suite installation
#
# James Bulpin, January-May 2006
#
# Copyright (c) 2006 XenSource, Inc. All use and distribution of this
# copyrighted material is governed by and subject to terms and
# conditions as licensed by XenSource, Inc. All other rights reserved.
#

# Put all local config in localconfig.mk. See an example in the docs directory
include localconfig.mk

# Where to get simplejson from
SIMPLEJSON_SITE ?= http://pypi.python.org/packages/source/s/simplejson

# Simple json version
SIMPLEJSON_VERSION ?= 2.1.1

# Where to get paramiko from.
PARAMIKO_SITE ?= http://www.lag.net/paramiko/download

# Paramiko version to install.
PARAMIKO_VERSION ?= 1.7.4

# Where to get pycrypto from.
PYCRYPTO_SITE ?= http://www.amk.ca/files/python/crypto

# Pycrypto version to install.
PYCRYPTO_VERSION ?= 2.0.1

# IPy version to install.
IPY_VERSION ?= 0.72

# Where to get IPy from 
IPY_SITE ?= https://github.com/haypo/python-ipy/wiki

# Where to get fpconst from.
FPCONST_SITE ?= http://cheeseshop.python.org/pypi/fpconst

# fpconst version to install.
FPCONST_VERSION ?= 0.7.2

# Where to get SOAPpy from
SOAPPY_SITE ?= http://pywebsvcs.sourceforge.net

# SOAPpy version to install.
SOAPPY_VERSION ?= 0.12.0

# Where to get Imaging from
IMAGING_SITE ?= http://www.pythonware.com/products/pil/

# Imaging version to install.
IMAGING_VERSION ?= 1.1.6

# Where to get logilab-common from

# logilab-common version to use
LL_COMMON_VERSION ?= 0.28.2

# Where to get logilab-astng from

# logilab-astng version to use
LL_ASTNG_VERSION ?= 0.17.2

# Where to get tlslite from
TLSLITE_SITE ?= http://trevp.net/tlslite/

# tlslite version to install.
TLSLITE_VERSION ?= 0.3.8

# Where to get pylint from

# pylint version to use
PYLINT_VERSION ?= 0.14.0

# Where to get epydoc from
EPYDOC_SITE ?= http://epydoc.sourceforge.net/

# epydoc version to use
EPYDOC_VERSION ?= 3.0beta1

# Where to get transcendental from
TRANSCENDENTAL_SITE ?= http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/python/special.html

# Transcendental version to use
TRANSCENDENTAL_VERSION ?= 0.09

# Where to get NumPY from
NUMPY_SITE ?= http://numpy.scipy.org/

# NumPY version to use
NUMPY_VERSION ?= 1.3.0

# Where to get Matplotlib from
MATPLOTLIB_SITE ?= http://matplotlib.sourceforge.net/

# Matplotlib version to use
MATPLOTLIB_VERSION ?= 0.99.1.2

#pywbem version to use
PYWBEM_VERSION ?= 0.7.0
 
# By default build the docs
BUILD_DOCS ?= yes

# By default we don't use SFU
NOSFU ?= ALL

# Default Windows autlogon password
WINDOWS_PASSWORD ?= xensource

# Defaults
ifeq ($(PREFIX),)
  ifeq ($(SHAREDIR),)
    SHAREDIR = /usr/share/xenrt
  endif
  ifeq ($(CONFDIR),)
    CONFDIR = /etc/xenrt
  endif
else
  ifeq ($(SHAREDIR),)
    SHAREDIR = $(PREFIX)/share
  endif
  ifeq ($(CONFDIR),)
    CONFDIR = $(PREFIX)/etc
  endif
endif

IMAGESDIR ?= $(SHAREDIR)/images
ISODIR ?= $(IMAGESDIR)/iso

ROOT   = $(shell pwd)

# Temporary working directory for image building
WORKDIR ?= $(ROOT)/tmp

# License keys can come from a separate repository parallel to this one
ifeq ($(wildcard $(ROOT)/../xenrt-internal.hg/keys),)
  KEYSDIR = $(ROOT)/keys
else
  KEYSDIR = $(ROOT)/../xenrt-internal.hg/keys
endif

# By default we build all tests, not just the ones we can distribute
BUILD_ALL_TESTS ?= yes

# Where the server is
WEB_CONTROL_PATH ?= http://127.0.0.1/share/control/

CCOPTS = -Wall -O2
CC     = gcc
HG     = hg
SUDO   = sudo

SHARE_SUBDIRS = apps bin control docs exec seqs scripts env data performance
SHARE_MKDIRS  = locks state results tests lib
SHARE_MKDIRS2 = dists

all: script-install
	@$(MAKE) ROOT=$(ROOT) -C progs $@ >> install.log 2>&1
	@if [ -d .hg ]; then $(MAKE) VERSION; fi

.PHONY: minimal-install install
minimal-install: all
	@rm -f install.log
	@echo "Creating installation directories..."
	@install -m 775 -d $(SHAREDIR) >> install.log 2>&1
	@install -m 775 -d $(SHAREDIR)/images >> install.log 2>&1
	@install -m 775 -d $(SHAREDIR)/images/xgts >> install.log 2>&1
	@install -m 775 -d $(SHAREDIR)/images/vms >> install.log 2>&1
	@install -m 775 -d $(CONFDIR) >> install.log 2>&1
	@install -m 775 -d $(CONFDIR)/machines >> install.log 2>&1
	@install -m 775 -d $(CONFDIR)/seqs >> install.log 2>&1
	@echo "Installing core XenRT components..."
	@for i in $(SHARE_SUBDIRS); do \
	  if [ -d $$i ]; then \
	    mkdir -p $(SHAREDIR)/$$i; \
	    rsync -avxl $(ROOT)/$$i/ $(SHAREDIR)/$$i/ >> install.log 2>&1; \
	  fi; \
	done;
	@if [ -e VERSION ]; then \
      install -m 644 VERSION $(CONFDIR)/VERSION >> install.log 2>&1; \
    fi

install: minimal-install
	@echo "Installing VM images..."
	@rsync -avx $(ROOT)/images/ $(SHAREDIR)/imagesrc/ >> install.log 2>&1
	@for img in $(TEST_INPUTS)/vms/*.img.gz; do \
	  bimg=$$(basename $$img); \
	  if [ -e $$img -a $$img -nt $(SHAREDIR)/images/vms/$${bimg%.gz} ]; then \
	    gunzip -c $$img > $(SHAREDIR)/images/vms/$${bimg%.gz}; \
	  fi; \
	done;
	@echo "Creating directories for run-time state..."
	@for i in $(SHARE_MKDIRS); do \
	  install -m 775 -d $(SHAREDIR)/$$i >> install.log 2>&1; \
	done
	@for i in $(SHARE_MKDIRS2); do \
	  install -m 777 -d $(SHAREDIR)/$$i >> install.log 2>&1; \
	done
	@echo "Building helper programs..."
	@$(MAKE) ROOT=$(ROOT) DESTDIR=$(SHAREDIR)/scripts/progs -C progs $@ \
	   >> install.log 2>&1
	@if [ -e $(CONFDIR)/site.xml ]; then \
	  install -m 644 examples/site.xml $(CONFDIR)/site.xml.distnew >> install.log 2>&1; \
	else \
	  install -m 644 examples/site.xml $(CONFDIR)/site.xml >> install.log 2>&1; \
	fi
	@echo "Setting up configuration files..."
	@if [ ! -d $(CONFDIR)/keys ]; then \
        mkdir -p $(CONFDIR)/keys; \
	    cp -R $(KEYSDIR)/* $(CONFDIR)/keys/; \
	fi
	@if [ ! -d $(CONFDIR)/suites ]; then \
	    mkdir -p $(CONFDIR)/suites; \
	fi
	@if [ ! -e $(SHAREDIR)/control/id.dat ]; then \
	  echo -n 1000 > $(SHAREDIR)/control/id.dat; \
	  chmod 644 $(SHAREDIR)/control/id.dat; \
	fi
	@TESTTARBALL=$(shell ls ../tests-????????.tar.gz 2>/dev/null | tail -n1); \
	if [ -n "$${TESTTARBALL}" ]; then \
	  echo "Updating local mirror of binary inputs..."; \
	  TMPDIR=`mktemp -d`; \
	  tar -zxf $${TESTTARBALL} -C $${TMPDIR}; \
	  rsync -avxl $${TMPDIR}/tests/ $(TEST_INPUTS)/ >> install.log 2>&1; \
	  rm -rf $${TMPDIR}; \
	fi
	@echo "Building test binary input tarballs..."
	@find . -type f -name '*-xenrt-symlink' | xargs -n1 ./decode-symlink \
	   >> install.log 2>&1
	@for t in `find tests -maxdepth 1 -mindepth 1 -type d`; do \
	  if [ -e $(ROOT)/tests/`basename $$t`/Manifest ]; then \
	    $(ROOT)/scripts/buildtarball `basename $$t` \
	      $(SHAREDIR)/tests \
	      $(WORKDIR)/`basename $$t` $(ROOT)/tests/`basename $$t` \
	      $(TEST_INPUTS)/`basename $$t` $(CONFDIR)/keys/`basename $$t` \
	      $(BUILD_ALL_TESTS) >> install.log 2>&1; \
	  else \
	    if $(ROOT)/scripts/checktarball `basename $$t` $(SHAREDIR)/tests \
	      $(ROOT)/tests/`basename $$t`; then \
	        (cd tests; tar -zcf $(SHAREDIR)/tests/`basename $$t`.tgz \
	        `basename $$t`) >> install.log 2>&1; \
	        touch $(SHAREDIR)/tests/.`basename $$t`.stamp; \
	    fi \
	  fi; \
	done
	@echo "Installing third party libraries..."
	@mkdir -p $(WORKDIR)
	@echo -n ".pycrypto."
	@cp $(ROOT)/ext/pycrypto-$(PYCRYPTO_VERSION).tar.gz $(WORKDIR)/pycrypto-$(PYCRYPTO_VERSION).tar.gz
	@tar xzf $(WORKDIR)/pycrypto-$(PYCRYPTO_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/pycrypto-$(PYCRYPTO_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/pycrypto-$(PYCRYPTO_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib >> install.log 2>&1
	@echo -n "IPy."
	@cp $(ROOT)/ext/IPy-$(IPY_VERSION).tar.gz $(WORKDIR)/IPy-$(IPY_VERSION).tar.gz
	@tar xzf $(WORKDIR)/IPy-$(IPY_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/IPy-$(IPY_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/IPy-$(IPY_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib >> install.log 2>&1
	@echo -n "simplejson."  
	@cp $(ROOT)/ext/simplejson-$(SIMPLEJSON_VERSION).tar.gz $(WORKDIR)/simplejson-$(SIMPLEJSON_VERSION).tar.gz
	@tar xzf $(WORKDIR)/simplejson-$(SIMPLEJSON_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/simplejson-$(SIMPLEJSON_VERSION) && python setup.py build >> install.log 2>&1
	@export PYTHONPATH=$(SHAREDIR)/lib && cd $(WORKDIR)/simplejson-$(SIMPLEJSON_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --old-and-unmanageable >> install.log 2>&1
	@echo -n "paramiko."
	@cp $(ROOT)/ext/paramiko-$(PARAMIKO_VERSION).tar.gz $(WORKDIR)/paramiko-$(PARAMIKO_VERSION).tar.gz
	@tar xzf $(WORKDIR)/paramiko-$(PARAMIKO_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/paramiko-$(PARAMIKO_VERSION) && python setup.py build >> install.log 2>&1
	@export PYTHONPATH=$(SHAREDIR)/lib && cd $(WORKDIR)/paramiko-$(PARAMIKO_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib >> install.log 2>&1
	@echo -n "fpconst."
	@cp $(ROOT)/ext/fpconst-$(FPCONST_VERSION).tar.gz $(WORKDIR)/fpconst-$(FPCONST_VERSION).tar.gz 
	@tar xzf $(WORKDIR)/fpconst-$(FPCONST_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/fpconst-$(FPCONST_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/fpconst-$(FPCONST_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib >> install.log 2>&1
	@echo -n "SOAPpy."
	@cp $(ROOT)/ext/SOAPpy-$(SOAPPY_VERSION).tar.gz $(WORKDIR)/SOAPpy-$(SOAPPY_VERSION).tar.gz
	@tar xzf $(WORKDIR)/SOAPpy-$(SOAPPY_VERSION).tar.gz -C $(WORKDIR)
	@export PYTHONPATH=$(SHAREDIR)/lib && cd $(WORKDIR)/SOAPpy-$(SOAPPY_VERSION) && python setup.py build >> install.log 2>&1
	@export PYTHONPATH=$(SHAREDIR)/lib && cd $(WORKDIR)/SOAPpy-$(SOAPPY_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib >> install.log 2>&1
	@echo -n "jira."
	@cp $(ROOT)/ext/jira.py $(SHAREDIR)/lib
	@echo -n "XenAPI."
	@cp $(ROOT)/ext/XenAPI.py $(SHAREDIR)/lib
	@echo -n "Imaging."
	@cp $(ROOT)/ext/Imaging-$(IMAGING_VERSION).tar.gz $(WORKDIR)/Imaging-$(IMAGING_VERSION).tar.gz
	@tar xzf $(WORKDIR)/Imaging-$(IMAGING_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/Imaging-$(IMAGING_VERSION) && python setup.py install_lib --install-dir $(SHAREDIR)/lib/PIL >> install.log 2>&1
	@echo -n "logilab."
	@cp $(ROOT)/ext/logilab-common-$(LL_COMMON_VERSION).tar.gz $(WORKDIR)/logilab-common-$(LL_COMMON_VERSION).tar.gz
	@tar xzf $(WORKDIR)/logilab-common-$(LL_COMMON_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/logilab-common-$(LL_COMMON_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/logilab-common-$(LL_COMMON_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/logilab/common >> install.log 2>&1
	@cp $(ROOT)/ext/pywbem-$(PYWBEM_VERSION).tar.gz $(WORKDIR)/pywbem-$(PYWBEM_VERSION).tar.gz
	@tar xzf $(WORKDIR)/pywbem-$(PYWBEM_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/pywbem-$(PYWBEM_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/pywbem-$(PYWBEM_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/pywbem >> install.log 2>&1
	@cp $(ROOT)/ext/logilab-astng-$(LL_ASTNG_VERSION).tar.gz $(WORKDIR)/logilab-astng-$(LL_ASTNG_VERSION).tar.gz
	@tar xzf $(WORKDIR)/logilab-astng-$(LL_ASTNG_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/logilab-astng-$(LL_ASTNG_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/logilab-astng-$(LL_ASTNG_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/logilab/astng >> install.log 2>&1
	@echo -n "tlslite."
	@cp $(ROOT)/ext/tlslite-$(TLSLITE_VERSION).tar.gz $(WORKDIR)/tlslite-$(TLSLITE_VERSION).tar.gz
	@tar xzf ${WORKDIR}/tlslite-$(TLSLITE_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/tlslite-$(TLSLITE_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/tlslite-$(TLSLITE_VERSION) && python setup.py install_lib --install-dir $(SHAREDIR)/lib >> installl.log 2>&1
	@echo -n "pylint."
	@cp $(ROOT)/ext/pylint-$(PYLINT_VERSION).tar.gz $(WORKDIR)/pylint-$(PYLINT_VERSION).tar.gz
	@tar xzf $(WORKDIR)/pylint-$(PYLINT_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/pylint-$(PYLINT_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/pylint-$(PYLINT_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/pylint >> install.log 2>&1
	@echo -n "epydoc."
	@cp $(ROOT)/ext/epydoc-$(EPYDOC_VERSION).tar.gz $(WORKDIR)/epydoc-$(EPYDOC_VERSION).tar.gz
	@tar xzf $(WORKDIR)/epydoc-$(EPYDOC_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/epydoc-$(EPYDOC_VERSION) && python setup.py build >> install.log 2>&1
	@cd $(WORKDIR)/epydoc-$(EPYDOC_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/epydoc >> install.log 2>&1
	@echo -n "numpy."
	@cp $(ROOT)/ext/numpy-$(NUMPY_VERSION).tar.gz $(WORKDIR)/numpy-$(NUMPY_VERSION).tar.gz
	@tar xzf $(WORKDIR)/numpy-$(NUMPY_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/numpy-$(NUMPY_VERSION) && python setup.py build >> install.log 2>&1 || true
	@cd $(WORKDIR)/numpy-$(NUMPY_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/numpy >> install.log 2>&1 || true
	@echo -n "transcendental."
	@cp $(ROOT)/ext/transcendental-$(TRANSCENDENTAL_VERSION).tar.gz $(WORKDIR)/transcendental-$(TRANSCENDENTAL_VERSION).tar.gz
	@tar xzf $(WORKDIR)/transcendental-$(TRANSCENDENTAL_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/transcendental-$(TRANSCENDENTAL_VERSION) && python setup.py config >> install.log 2>&1 || true
	@cd $(WORKDIR)/transcendental-$(TRANSCENDENTAL_VERSION) && python setup.py build >> install.log 2>&1 || true
	@cd $(WORKDIR)/transcendental-$(TRANSCENDENTAL_VERSION) && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/transcendental >> install.log 2>&1 || true
	@echo "matplotlib"
	@cp $(ROOT)/ext/matplotlib-$(MATPLOTLIB_VERSION).tar.gz $(WORKDIR)/matplotlib-$(MATPLOTLIB_VERSION).tar.gz
	@tar xzf $(WORKDIR)/matplotlib-$(MATPLOTLIB_VERSION).tar.gz -C $(WORKDIR)
	@cd $(WORKDIR)/matplotlib-0.99.1.1 && python setup.py build >> install.log 2>&1 || true
	@cd $(WORKDIR)/matplotlib-0.99.1.1 && python setup.py install --install-lib $(SHAREDIR)/lib --install-scripts $(SHAREDIR)/lib/matplotlib >> install.log 2>&1 || true
	@if [ ${BUILD_DOCS} = yes ]; then \
		echo "Creating testcase API documentation..."; \
		export PYTHONPATH=$(SHAREDIR)/lib && $(SHAREDIR)/lib/epydoc/epydoc --html --name XenRT -q -o $(SHAREDIR)/docs/API $(ROOT)/exec/xenrt $(ROOT)/exec/testcases >> install.log 2>&1; \
	fi

uninstall:
	rm -f $(SHAREDIR)/tests/*.tgz
	$(MAKE) ROOT=$(ROOT) DESTDIR=$(SHAREDIR)/scripts/progs -C progs $@
	for i in $(SHARE_SUBDIRS); do \
	  rm -rf $(SHAREDIR)/$$i; \
	done
	for i in $(SHARE_MKDIRS); do \
	  rmdir	$(SHAREDIR)/$$i; \
	done
	for i in $(SHARE_MKDIRS2); do \
	  rmdir	$(SHAREDIR)/$$i; \
	done
	rmdir $(SHAREDIR)
	rmdir $(CONFDIR)/machines
	rmdir $(CONFDIR)/seqs
	rmdir $(CONFDIR)/keys
	rmdir $(CONFDIR)

clean:
	$(MAKE) ROOT=$(ROOT) -C progs $@
	rm -f control/xenrt.py
	rm -f exec/xenrt/ctrl.py

distclean: script-distclean clean
	rm -f VERSION

.PHONY: VERSION script-install script-distclean distclean clean keys lint lint-pedantic precommit tests-tarball
VERSION:
	@VER=`$(HG) tags | awk '{if(/^RELEASE/) {print $$1; exit 0;}}' | sed -e's/RELEASE-//'`; \
	REV=`hg parent | awk '{if(/^changeset/) {print $$2; exit 0;}}' | cut -d : -f 2`; \
	echo $${VER}-$${REV} > $@

# Distribution tarball
dist:
	@REV=`hg tip | awk '{if(/^changeset/) {print $$2; exit 0;}}' | cut -d : -f 2`; $(MAKE) dist-$${REV}

dist-%:
	@REV=$(patsubst dist-%,%,$@); \
	TMPDIR=$(shell mktemp -d); \
	FILENAME=$(notdir $(shell pwd))-$${REV}.tar.gz; \
	mkdir -p $${TMPDIR}/xenrt-$${REV}; \
	hg archive -r $${REV} $${TMPDIR}/xenrt-$${REV}; \
	echo $${REV} > $${TMPDIR}/xenrt-$${REV}/VERSION; \
	tar -zcf $${FILENAME} -C $${TMPDIR} xenrt-$${REV}; \
	rm -rf $${TMPDIR}; \
	echo Archive: $${FILENAME}

# Tarball of distributable tests
tests-tarball:
	@rm -rf $(WORKDIR)/tests
	@mkdir -p $(WORKDIR)/tests
	@$(ROOT)/scripts/ova/copytests $(ROOT)/tests $(TEST_INPUTS) $(WORKDIR)/tests
	@REV=`date +%Y%m%d`; \
	FILENAME=$(ROOT)/tests-$${REV}.tar.gz; \
	cd $(WORKDIR) && tar -czf $${FILENAME} tests; \
	rm -fr $(WORKDIR)/tests; \
	echo Tarball: $${FILENAME}

# Bring in new keys
keys:
	mkdir -p $(CONFDIR)/keys
	cp -fR $(KEYSDIR)/* $(CONFDIR)/keys/

# Preprocess files
script-install:
	@for s in `find . -name tests -prune -o -name "*.in" -print`; do \
	  sed -e"s#@sharedir@#$(SHAREDIR)#" -e"s#@confdir@#$(CONFDIR)#" \
	      -e"s#@webcontrdir@#$(WEB_CONTROL_PATH)#" \
	      -e"s#@rootdir@#$(ROOT)#" \
	    < $$s > `echo $$s | sed -e's/.in$$//'`; \
	  chmod --reference=$$s `echo $$s | sed -e's/.in$$//'`; \
	done
	@if [ ! -e control/xenrt.py ]; then cd control; ln -s xenrt xenrt.py; fi
	@if [ ! -e exec/xenrt/ctrl.py ]; then \
	  ln -s ../../control/xenrt exec/xenrt/ctrl.py; \
	fi

script-distclean:
	for s in `find . -name tests -prune -o -name "*.in" -print`; do \
	  rm -f `echo $$s | sed -e's/.in$$//'`; \
	done

# Run a minimal pylint on xenrt and testcases
lint:
	export PYTHONPATH=$(SHAREDIR)/lib && cd $(ROOT)/exec && \
	  $(SHAREDIR)/lib/pylint/pylint --rcfile=$(ROOT)/scripts/pylintrc \
	  xenrt testcases

# Run a pedantic pylint
lint-pedantic:
	export PYTHONPATH=$(SHAREDIR)/lib && cd $(ROOT)/exec && \
	  $(SHAREDIR)/lib/pylint/pylint --rcfile=$(ROOT)/scripts/pylintrc-pedantic \
	  xenrt testcases > $(SHAREDIR)/docs/pylint.html

# Perform any pre-commit checks (e.g. pylint)
precommit:
	@for f in `(hg status -amn ; [ ! -d .hg/patches ] || hg diff -r qparent:qtip | lsdiff --strip 1) | egrep '\.(py|in)$$' | sort | uniq`; do \
	  echo "Checking $$f..." && \
	  export PYTHONPATH=$(SHAREDIR)/lib:$(PYTHONPATH) && cd $(ROOT) && \
	  $(SHAREDIR)/lib/pylint/pylint --rcfile=$(ROOT)/scripts/pylintrc \
	  $$f && \
	  $(ROOT)/scripts/misspelt $$f; \
	done; \
	for f in `hg status -amn | grep -e '\.seq$$'`; do \
	  echo "Checking $$f..." && \
	  xmllint --noout $$f && \
	  $(ROOT)/scripts/misspelt $$f; \
	done

# Perform pre-commit checks on all files
precommit-all:
	@for f in `find | egrep '\.(py|in)$$' | sort | uniq`; do \
	  echo "Checking $$f..." && \
	  export PYTHONPATH=$(SHAREDIR)/lib:$(PYTHONPATH) && cd $(ROOT) && \
	  $(SHAREDIR)/lib/pylint/pylint --rcfile=$(ROOT)/scripts/pylintrc \
	  $$f && \
	  $(ROOT)/scripts/misspelt $$f; \
	done; \
	for f in `find | grep -e '\.seq$$'`; do \
	  echo "Checking $$f..." && \
	  xmllint --noout $$f && \
	  $(ROOT)/scripts/misspelt $$f; \
	done

# Encode testscript symlinks for packaging - only done when checking stuff in.
# will require the symlink files to be checked in to the repository.
test-symlink-files:
	find tests -type l | xargs -n1 ./encode-symlink

#############################################################################
# Make a particular tarball                                                 #
#############################################################################

.PHONY: %.tgz
%.tgz:
	if [ -e $(ROOT)/tests/$(patsubst %.tgz,%,$@)/Manifest ]; then \
	  $(ROOT)/scripts/buildtarball $(patsubst %.tgz,%,$@) \
	    $(SHAREDIR)/tests \
	    $(WORKDIR)/$(patsubst %.tgz,%,$@) $(ROOT)/tests/$(patsubst %.tgz,%,$@) \
	    $(TEST_INPUTS)/$(patsubst %.tgz,%,$@) \
        $(CONFDIR)/keys/$(patsubst %.tgz,%,$@) $(BUILD_ALL_TESTS); \
	else \
	  if $(ROOT)/scripts/checktarball $(patsubst %.tgz,%,$@) $(SHAREDIR)/tests \
	    $(ROOT)/tests/$(patsubst %.tgz,%,$@); then \
	      (cd tests; tar -zcf $(SHAREDIR)/tests/$@ \
	      $(patsubst %.tgz,%,$@)); \
	      touch $(SHAREDIR)/tests/.$(patsubst %.tgz,%,$@).stamp; \
	  fi \
	fi;

#############################################################################
# Make unattended Windows install ISOs from product ISOs.                   #
#############################################################################

.PRECIOUS: $(ISODIR)/%.iso

# How to make a single ISO.
$(ISODIR)/%.iso:
	mkdir -p $(WORKDIR)
	mkdir -p $(@D)
	$(SUDO) $(ROOT)/images/buildiso \
	  $(WINDOWSISOS)/$(patsubst $(ISODIR)/%.iso,%,$@).iso \
	  $(patsubst $(ISODIR)/%.iso,%,$@) $@ WORKDIR=$(WORKDIR) NOSFU=$(NOSFU) \
	  CONFDIR=$(CONFDIR) PASSWORD=$(WINDOWS_PASSWORD)

$(IMAGESDIR)/%/autoinstall-x86-32.iso: $(ISODIR)/%.iso
	mkdir -p $(@D)
	rm -f $@ $(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.iso,$(IMAGESDIR)/%/autoinstall-x86-32p.iso,$@)
	ln -s ../iso/$(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.iso,%,$@).iso $@
	ln -s ../iso/$(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.iso,%,$@).iso \
	  $(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.iso,$(IMAGESDIR)/%/autoinstall-x86-32p.iso,$@)

# Make ISOs for each version we support:
isos:
	[ -d $(ISODIR) ] || mkdir -p $(ISODIR)
	for V in `cat $(CONFDIR)/keys/windows | grep -v "longhorn" | cut -d " " -f 1`; do \
	  if [ -e $(WINDOWSISOS)/$$V.iso ]; then \
	    [ -d $(IMAGESDIR)/$$V ] || mkdir -p $(IMAGESDIR)/$$V; \
	    $(MAKE) $(IMAGESDIR)/$$V/autoinstall-x86-32.iso; \
	  else \
	    echo "Not making $$V ISO, no source media."; \
	  fi; \
	done

# Make a directory of ISOs without autoinstall-x86-32.iso etc. symlinks
justisos:
	[ -d $(ISODIR) ] || mkdir -p $(ISODIR)
	for V in `cat $(CONFDIR)/keys/windows | cut -d " " -f 1`; do \
	  if [ -e $(WINDOWSISOS)/$$V.iso ]; then \
	    $(MAKE) $(ISODIR)/$$V.iso; \
	  else \
	    echo "Not making $$V ISO, no source media."; \
	  fi; \
	done

##########################################################################
# Make zip files for native unattended Windows installs.			     #
##########################################################################

.PRECIOUS: $(IMAGESDIR)/zip/%.zip $(IMAGESDIR)/%/autoinstall-x86-32.iso 

$(IMAGESDIR)/zip/%.zip: $(ISODIR)/%.iso 
	mkdir -p $(WORKDIR)
	mkdir -p $(@D)
	WORKDIR=$(WORKDIR) $(SUDO) $(ROOT)/images/buildzip $< \
	  $(patsubst $(IMAGESDIR)/zip/%.zip,%,$@) $@

$(IMAGESDIR)/%/autoinstall-x86-32.zip: $(IMAGESDIR)/zip/%.zip
	mkdir -p $(@D)
	rm -f $@ $(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.zip,$(IMAGESDIR)/%/autoinstall-x86-32p.zip,$@)
	ln -s ../zip/$(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.zip,%,$@).zip $@
	ln -s ../zip/$(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.zip,%,$@).zip \
      $(patsubst $(IMAGESDIR)/%/autoinstall-x86-32.zip,$(IMAGESDIR)/%/autoinstall-x86-32p.zip,$@)

zips:
	[ -d $(IMAGESDIR)/zip ] || mkdir -p $(IMAGESDIR)/zip
	[ -d $(ISODIR) ] || mkdir -p $(ISODIR)
	for V in `cat $(CONFDIR)/keys/windows | grep -v "longhorn" | cut -d " " -f 1`; do \
	  if [ -e $(WINDOWSISOS)/$$V.iso ]; then \
	    [ -d $(IMAGESDIR)/$$V ] || mkdir -p $(IMAGESDIR)/$$V; \
	    $(MAKE) $(IMAGESDIR)/$$V/autoinstall-x86-32.zip; \
	  else \
	    echo "Not making $$V zip, no source media."; \
	  fi; \
	done

#########################################################################
# Set up a database and cron job for scheduling.                        #
#########################################################################

database: script-install
	$(SUDO) su - postgres -c "createuser -ad xenrtd"
	createdb xenrt
	psql xenrt < control/database.sql
	crontab control/crontab

database-clean:
	dropdb xenrt
	$(SUDO) su - postgres -c "dropuser xenrtd"

