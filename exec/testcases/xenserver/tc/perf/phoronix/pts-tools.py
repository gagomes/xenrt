import re, sqlite3, xml.dom.minidom, datetime
import sys

DBFILE='/usr/groups/perfeng/results/reqphoronix/pts.sqlite'


def createTable(tableName):
    """create-table tableName:
    
    Creates a table in the SQLite database with name tableName.
    This name should be the config ID, e.g. "pts321_squeeze_x86"
    """
    with sqlite3.connect(DBFILE) as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE %s
                        (runid INTEGER PRIMARY KEY ASC,
                         name VARCHAR(255),
                         desc VARCHAR(65535),
                         args VARCHAR(65535),
                         result VARCHAR(65535),
                         xsversion UNSIGNED INT,
                         date DATETIME);""" % tableName)
        conn.commit()


def _procResults(tableName, xmlString, xsVersion):
    with sqlite3.connect(DBFILE) as conn:
        c = conn.cursor()
        dom = xml.dom.minidom.parseString(xmlString)
        for resDom in dom.getElementsByTagName("Result"):
            testName = resDom.getElementsByTagName("Identifier")[0].childNodes[0].data
            testDesc = resDom.getElementsByTagName("Description")[0].childNodes[0].data
            argsTexts = resDom.getElementsByTagName("Arguments")[0].childNodes;
            testArgs = ''
            if len(argsTexts) > 0:
                testArgs = argsTexts[0].data
            for entryDom in resDom.getElementsByTagName("Entry"):
                date = entryDom.getElementsByTagName("Identifier")[0].childNodes[0].data
                result = entryDom.getElementsByTagName("RawString")[0].childNodes[0].data
                c.execute("INSERT INTO %s VALUES (NULL,?,?,?,?,?,datetime(?));" % tableName, (testName, testDesc, testArgs, result, xsVersion, date))
        conn.commit()

def procResults(tableName, resultLoc, xsVersion=None):
    """proc-results tableName resultLoc [xsVersion]
    
    Reads the Phoronix result XML at resultLoc (normally found under
    ~/.phoronix-test-suite/test-results/<DATE>/composite.xml)
    and inserts the data into the SQLite database table called tableName.
    
    xsVersion is the XenServer version being tested; it defaults to "baremetal".
    """
    if xsVersion == "baremetal":
        xsVersion = None
    with open(resultLoc, "r") as f:
        _procResults(tableName, f.read(), xsVersion);

def generateTC(tableName):
    """generate-tc tableName
    
    Generates test-case (.py) and sequence (.seq) files based on the bare-metal Phoronix test
    results found in the SQLite database table called tableName."""
    
    AUTOGEN = "THIS FILE WAS AUTO-GENERATED BY %s @ %s" % (sys.argv[0], datetime.datetime.now().strftime("%d/%m/%y %H:%M"))
    
    # python testcase file head
    PYHEAD = """### %s ###

import xenrt
import libperf

PTS_NAME = "%s"
""" % (AUTOGEN, tableName) + '''
class PhoronixInstall(libperf.PerfTestCase):
    def __init__(self):
        libperf.PerfTestCase.__init__(self, None)
    
    def prepare(self, arglist):
        self.basicPrepare(arglist or [])
    
    def run(self, arglist):
        self.host = self.getDefaultHost()
        localsruuid = self.host.execdom0("""xe sr-list name-label=Local\ storage  --minimal""").strip()
        self.guest = self.importVMFromRefBase(self.host, "t_chengs/%s.xva" % PTS_NAME, PTS_NAME, localsruuid)
        self.guest.start()

class _PhoronixBase(libperf.PerfTestCase):
    """http://www.phoronix-test-suite.com/"""
    
    TESTNAME = None
    TESTARGS = None
    TESTDESC = None
    
    def __init__(self):
        libperf.PerfTestCase.__init__(self, None)
    
    def createTmpSuite(self):
        SUITEDIR = "~/.phoronix-test-suite/test-suites/local/xenrt"
        try:
            self.guest.execguest("rm -r %s" % SUITEDIR)
        except:
            pass
        self.guest.execguest("mkdir -p %s" % SUITEDIR)
        self.guest.execguest("""cat > %s/suite-definition.xml <<EOF
<?xml version="1.0"?>
<PhoronixTestSuite>
  <SuiteInformation>
    <Title>xenrt</Title>
    <Version>1.0.0</Version>
    <TestType>Other</TestType>
    <Description>xenrt temporary suite</Description>
    <Maintainer>pts-tools.sh</Maintainer>
  </SuiteInformation>
  <Execute>
    <Test>%s</Test>
    <Arguments>%s</Arguments>
    <Description>%s</Description>
  </Execute>
</PhoronixTestSuite>
EOF""" % (SUITEDIR, self.TESTNAME, self.TESTARGS, self.TESTDESC), newlineok = True)
    
    def prepare(self, arglist):
        self.basicPrepare(arglist or [])
        
        self.host = self.getDefaultHost()
        self.guest = self.host.getGuest(PTS_NAME)
        
        self.guest.execguest("rm -rf ~/.phoronix-test-suite/test-results/*")
        
        self.createTmpSuite()
        # PTS does not use exit-codes to signify failure -- we have to check the output
        out = self.guest.execguest("phoronix-test-suite install local/xenrt", timeout=20*60)
        # "ERROR: foo"
        # "The following tests failed to install"
        if out.find("ERROR") > -1 or out.find("failed to install") > -1:
            # TODO: something like sftp.copyFrom("install-failed.log", "%s/install-failed.log" % xenrt.TEC().getLogdir())
            raise xenrt.XRTFailure("%s [%s] failed to install" % (self.TESTNAME, self.TESTDESC))
    
    def run(self, arglist):
        # PTS does not use exit-codes to signify failure -- we have to check the output
        out = self.guest.execguest("phoronix-test-suite batch-benchmark local/xenrt", timeout=5*60*60)  # 5hrs should be enough
        # "ERROR: foo"
        # "The following tests failed to properly run"
        if out.find("ERROR") > -1 or out.find("failed to properly run") > -1:
            #self.tec.logverbose(out)
            raise xenrt.XRTFailure("%s [%s] failed to run" % (self.TESTNAME, self.TESTDESC))
    
    def postRun(self):
        # gather result
        src = "%s/composite.xml" % self.guest.execguest("ls -1d ~/.phoronix-test-suite/test-results/* | grep -v pts-results-viewer").strip()
        dest = "%s/composite.xml" % self.tec.getLogdir()
        sftp = self.guest.sftpClient()
        sftp.copyFrom(src, dest)
'''
    
    # python testcase file body
    PYDATA = lambda className, aliasName, testName, testDesc, testArgs: """
class %s(_PhoronixBase):
    TESTNAME="%s"
    TESTDESC="%s"
    TESTARGS="%s"
""" % (className, testName, testDesc, testArgs)
    
    # python testcase file tail
    PYTAIL = """
"""
    
    # sequence head
    SEQHEAD = """<xenrt>
  
  <!-- Phoronix Test Suite [Configuration: %s] -->
  <!-- %s -->
  
  <variables>
    <PRODUCT_VERSION>Boston</PRODUCT_VERSION>
  </variables>
  
  <prepare>
    <host/>
  </prepare>
  
  <testsequence>

    <testcase id="xenserver.tc.perf.phoronix.%s.PhoronixInstall" blocker="yes" />
""" % (tableName, AUTOGEN, tableName)
    
    # sequence body
    SEQDATA = lambda className, aliasName, testName, testDesc, testArgs: """
    <!-- %s [%s] -->
    <testcase id="xenserver.tc.perf.phoronix.%s.%s" name="%s" />
""" % (testName, testDesc, tableName, className, aliasName)
    
    # sequence tail
    SEQTAIL = """
  </testsequence>

</xenrt>
"""
    
    # {"name": ("desc", "args")}
    tests = {}
    
    # get tests from database
    with sqlite3.connect(DBFILE) as conn:
        c = conn.cursor()
        c.execute("SELECT name, desc, args FROM %s WHERE xsversion IS NULL;" % tableName)
        for row in c:
            if row[0] not in tests:
                tests[row[0]] = set()
            tests[row[0]].add((row[1], row[2]))
    
    testID = 0
    
    # write the files
    with open("%s.py" % tableName, 'w') as pyFile:
        with open("%s.seq" % tableName, 'w') as seqFile:
            # headers
            pyFile.write(PYHEAD)
            seqFile.write(SEQHEAD)
            # bodies
            for testName in tests:
                configID = 0
                for testConfig in tests[testName]:
                    # remove pts/ namespace and version number from testName
                    clippedName = re.match(r"^.+/(.+)-[^-]*$", testName).group(1)
                    sanitisedName = re.sub(r"\W", "", clippedName)
                    sanitisedDesc = re.sub(r"\W", "", testConfig[0])
                    # XenRT only supports names up to 24 (IIRC) characters:
                    assert configID <= 99
                    aliasName = "TCPTS-%s%02d" % (sanitisedName[0:16], configID)
                    className = "TCPTS_%s_%s" % (sanitisedName, sanitisedDesc)
                    configID += 1
                    
                    pyFile.write(PYDATA(className, aliasName, testName, testConfig[0], testConfig[1]))
                    seqFile.write(SEQDATA(className, aliasName, testName, testConfig[0], testConfig[1]))
            # tails
            pyFile.write(PYTAIL)
            seqFile.write(SEQTAIL)

def help(fnName = None):
    if fnName in mappings:
        print mappings[fnName].__doc__
        return
    elif fnName:
        print "Invalid command '%s'." % fnName
    print """
pts-tools.py - a set of tools to generate XenRT test files for the
               Phoronix Test Suite (PTS)

USAGE:
pts-tools.py command [args ...]

COMMANDS:
* help             prints help. Use "help command" for detailed help.
* create-table     creates a table in the DB to hold results
* proc-results     processes a PTS results file (composite.xml) into the DB
* generate-tc      generates test-case and sequence files for XenRT from the DB
"""

mappings = {
    # list of mappings from arguments to functions
    "help": help,
    "create-table": createTable,
    "proc-results": procResults,
    "generate-tc": generateTC
}

if __name__ == '__main__':
    mappings[sys.argv[1]](*sys.argv[2:])   # calls the appropriate function with args
