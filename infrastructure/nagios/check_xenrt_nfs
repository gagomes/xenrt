#!/usr/bin/python

import sys,os,glob,xml.dom.minidom,string

errors = []


def checkNFS(address,name):
    os.popen("sudo umount /tmp/nagiosnfs").close()
    f = os.popen("sudo mkdir -p /tmp/nagiosnfs && sudo mount %s /tmp/nagiosnfs && sudo umount /tmp/nagiosnfs 2>&1" % address)
    err = f.close()
    if err:
        errors.append("%s (%s)" % (address, name))
    os.popen("sudo umount /tmp/nagiosnfs").close()
    return err

def getTextFromXmlNode(node):
    for n in node.childNodes:
        if n.nodeType == n.TEXT_NODE or n.nodeType == n.CDATA_SECTION_NODE:
            return n.data

paths = ["EXPORT_ISO_NFS", "EXPORT_ISO_NFS_STATIC", "RPM_SOURCE_NFS", "XD_XVA_SOURCE_NFS"]

sfiles = ["/etc/xenrt/site.xml"]
sfiles.extend(glob.glob("/etc/xenrt/conf.d/*/*.xml"))

for s in sfiles:
    f = open(s)
    sitedom = xml.dom.minidom.parseString(f.read())    
    f.close()

    for p in paths:
        try:
            nfs = getTextFromXmlNode(sitedom.getElementsByTagName(p)[0])
            checkNFS(nfs, p)
        except:
            pass

    try:
        nfslist = sitedom.getElementsByTagName("EXTERNAL_NFS_SERVERS")[0]
        for n in nfslist.childNodes:
            try:
                server = getTextFromXmlNode(n.getElementsByTagName("ADDRESS")[0])
                path = getTextFromXmlNode(n.getElementsByTagName("BASE")[0])
                checkNFS("%s:%s" % (server,path), "NFS SR")
            except Exception, e:
                pass
    except:
        pass

if len(errors) == 0:
    print "XenRT NFS check OK"
    sys.exit(0)

else:
    print "XenRT NFS check CRITICAL: %s" % (", ".join(map (lambda x: "%s failed" % x, errors)))
    sys.exit(2)

