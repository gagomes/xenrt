#!/usr/bin/python

import sys,os,glob,xml.dom.minidom,string

checktype = sys.argv[1]

sitexmlnodes = []
machinexmlnodes = []

if checktype == "gateways":
    sitexmlnodes = [("DEFAULT","GATEWAY","NPRI Gateway"),
                ("SECONDARY","GATEWAY","NSEC Gateway"),
                ("VR01","GATEWAY","VR01 Gateway"),
                ("VR02","GATEWAY","VR02 Gateway"),
                ("VR03","GATEWAY","VR03 Gateway"),
                ("VR04","GATEWAY","VR04 Gateway"),
                ("VR05","GATEWAY","VR05 Gateway"),
                ("VR06","GATEWAY","VR06 Gateway"),
                ("VR07","GATEWAY","VR07 Gateway"),
                ("VR08","GATEWAY","VR08 Gateway"),
                ("DEFAULT","GATEWAY6","NPRI IPv6 Gateway"),
                ("SECONDARY","GATEWAY6","NSEC IPv6 Gateway"),
                ("DH6","GATEWAY6","DH6 IPv6 Gateway"),
                ("RA6","GATEWAY6","RA6 IPv6 Gateway"),
                ("VR01","GATEWAY6","VR01 IPv6 Gateway"),
                ("VR02","GATEWAY6","VR02 IPv6 Gateway"),
                ("VR03","GATEWAY6","VR03 IPv6 Gateway"),
                ("VR04","GATEWAY6","VR04 IPv6 Gateway"),
                ("VR05","GATEWAY6","VR05 IPv6 Gateway"),
                ("VR06","GATEWAY6","VR06 IPv6 Gateway"),
                ("VR07","GATEWAY6","VR07 IPv6 Gateway"),
                ("VR08","GATEWAY6","VR08 IPv6 Gateway")]
elif checktype == "pdus":
    sitexmlnodes = [("HOST_CONFIGS","PDU_ADDRESS","PDU")]
    machinexmlnodes = [("PDU_ADDRESS", "PDU")]
elif checktype == "bmcs":
    sitexmlnodes = [("HOST_CONFIGS","BMC_ADDRESS","BMC")]
    machinexmlnodes = [("BMC_ADDRESS", "BMC")]
elif checktype == "consoles":
    machinexmlnodes = [("CONSOLE_ADDRESS", "Serial Concentrator")]
    sitexmlnodes = [("CONSERVER_ENTRIES", "CONSOLE_ADDRESS", "Serial Concentrator")]
elif checktype == "smtp":
    sitexmlnodes = [("xenrt", "SMTP_SERVER", "SMTP Server")]
elif checktype == "storage":
    sitexmlnodes = [("ISCSI_LUNS","SERVER_ADDRESS","iSCSI LUN"),
                ("EQUALLOGIC","TARGET","EqualLogic File"),
                ("EXTERNAL_NFS_SERVERS","ADDRESS","NFS Server"),
                ("NETAPP_FILERS","TARGET","NetApp Filer"),
                ("FC_PROVIDER","TARGET","NetApp FC Provider"),
                ("SMIS_ISCSI_TARGETS","TARGET","SMI-S iSCSI Provider"),
                ("SMIS_FC_TARGETS","TARGET","SMI-S FC Provider")]
elif checktype == "netpeers":
    sitexmlnodes = [("TTCP_PEERS","ADDRESS","Network Test Peer")]
elif checktype == "sharedhosts":
    sitexmlnodes = [("SHARED_HOSTS","ADDRESS","Shared Host")]
else:
    sys.stderr.write("Unknown ping check specified\n")
    sys.exit(3)

errors = []


def checkPing(address,name):
    pingcmd = "ping"
    if string.find(address, ":") >= 0:
        pingcmd = "ping6"
    f = os.popen("%s -c 1 -W 1 %s 2>&1" % (pingcmd, address))
    err = f.close()
    if err:
        errors.append("%s (%s)" % (address, name))
    return err

def getTextFromXmlNode(node):
    for n in node.childNodes:
        if n.nodeType == n.TEXT_NODE or n.nodeType == n.CDATA_SECTION_NODE:
            return n.data

sfiles = ["/etc/xenrt/site.xml"]
sfiles.extend(glob.glob("/etc/xenrt/conf.d/*/*.xml"))
pinglist = {}

for s in sfiles:
    f = open(s)
    sitedom = xml.dom.minidom.parseString(f.read())    
    f.close()

    for (i,j,k) in sitexmlnodes:
        try:
            targetlist = sitedom.getElementsByTagName(i)[0]
            addresslist = targetlist.getElementsByTagName(j)
            for a in addresslist:
                addr = getTextFromXmlNode(a)
                if string.count(addr, ":") == 1:
                    addr = addr.split(":")[0]
                if not pinglist.has_key(addr):
                    pinglist[addr] = "%s %s" % (k,addr)
        except:
            pass


f = open("/etc/xenrt/siteid")
site = f.read().strip()
f.close()
f = os.popen("xenrt mlist2 -s %s -C" % site)
machines = f.readlines()
f.close()

machinexml = xml.dom.minidom.parseString(os.popen("xrt --run-tool 'machineXML()'").read())

for m in machines:
    (machine,status,job) = m.split(",")
    if status == "offline":
        continue
    try:
        mdom = machinexml.getElementsByTagName(machine)[0]
        for (i,j) in machinexmlnodes:
            addresslist = mdom.getElementsByTagName(i)
            for a in addresslist:
                addr = getTextFromXmlNode(a).split(":")[0]
                if not pinglist.has_key(addr):
                    pinglist[addr] =  "%s %s" % (machine, j)
    except Exception, e:
        continue

for i in pinglist.keys():
    checkPing(i,pinglist[i])

if len(errors) == 0:
    print "XenRT ping check of %s OK" % checktype
    sys.exit(0)

else:
    print "XenRT ping check of %s CRITICAL: %s" % (checktype, ", ".join(map (lambda x: "%s failed" % x, errors)))
    sys.exit(2)

