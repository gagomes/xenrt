diff -r 332407a047fd Makefile
--- a/Makefile	Fri Feb 05 09:07:25 2010 +0000
+++ b/Makefile	Fri Feb 05 13:20:43 2010 +0000
@@ -82,6 +82,13 @@
 OVA_STAGING = $(ISO_STAGING)/$(COMPONENT)
 OVA_IMAGE = $(MY_OBJ_DIR)/ova.ext3
 
+XENRT_SWAP_IMAGE = $(MY_OBJ_DIR)/swap
+XENRT_SWAP_G = 2
+XENRT_SWAP_DEVICE = sdb
+XENRT_DATA_IMAGE = $(MY_OBJ_DIR)/data.ext3
+XENRT_DATA_G = 100
+XENRT_DATA_DEVICE = sdc
+
 iso-cookie = $(MY_OBJ_DIR)/.$(1).iso.cookie
 ISO_COOKIE = $(call iso-cookie,$(COMPONENT))
 
@@ -90,14 +97,18 @@
 SUPP_PACK_FILES_SRC = $(addprefix $(STAGING)/usr/local/bin/,$(SUPP_PACK_FILES))
 
 # In 1,000,000,000 bytes not 1,073,741,824 (i.e. GB not GiB)
-OVA_DISK_G = 2
+OVA_DISK_G ?= 2
 # In 1,048,576 bytes not 1,000,000 (i.e. MiB not MB)
-OVA_MEM_MB = 512
-OVA_ROOT_DEVICE = xvda
+OVA_MEM_MB ?= 512
+OVA_ROOT_DEVICE = sda
 
 OVA_BRANDING = sed -e "s/@OVA_ROOT_DEVICE@/$(OVA_ROOT_DEVICE)/g" \
                    -e "s/@OVA_DISK@/$$(( $(OVA_DISK_G)*1000*1000*1000 ))/g" \
-                   -e "s/@OVA_MEM@/$$(( $(OVA_MEM_MB)*1024*1024 ))/g"
+                   -e "s/@OVA_MEM@/$$(( $(OVA_MEM_MB)*1024*1024 ))/g" \
+                   -e "s/@XENRT_SWAP_DEVICE@/$(XENRT_SWAP_DEVICE)/g" \
+                   -e "s/@XENRT_DISK_SWAP@/$$(( $(XENRT_SWAP_G)*1000*1000*1000 ))/g" \
+                   -e "s/@XENRT_DATA_DEVICE@/$(XENRT_DATA_DEVICE)/g" \
+                   -e "s/@XENRT_DISK_DATA@/$$(( $(XENRT_DATA_G)*1000*1000*1000 ))/g"
 
 include $(PROJECT_OUTPUTDIR)/kernel-dom0/kernel.inc
 
@@ -105,8 +116,8 @@
 build-dom0: $(DOM0_PACKAGE) $(CDFILES_INSTALLED_COOKIE) $(MY_SOURCES)/MANIFEST
 	@ :
 
-.PHONY: build-ddk
-build-ddk: $(ISO) $(SUPP_PACK_TARBALL) $(MY_SOURCES)/MANIFEST
+.PHONY: build-ddk build-xenrt
+build-ddk build-xenrt: $(ISO) $(SUPP_PACK_TARBALL) $(MY_SOURCES)/MANIFEST
 	@:
 
 .PHONY: build-sdk
@@ -424,6 +435,47 @@
 
 	@touch $@
 
+$(call post-cookie,xenrt): $(COMMON_POST_COOKIE)
+	$(CHROOT) depmod -a $(KERNEL_VERSION)
+	$(CHROOT) mkinitrd -f /boot/initrd-$(KERNEL_VERSION).img $(KERNEL_VERSION)
+	ln -fs menu.lst $(STAGING)/boot/grub/grub.conf
+	$(CHROOT) rm -f /etc/localtime
+	$(CHROOT) cp /usr/share/zoneinfo/UTC /etc/localtime
+	$(CHROOT) /sbin/chkconfig iptables off || true
+	$(CHROOT) /sbin/chkconfig httpd on || true
+	$(CHROOT) /sbin/chkconfig ntpd on || true
+	$(CHROOT) /sbin/chkconfig postgresql on || true
+	$(CHROOT) /sbin/chkconfig nfs on || true
+	$(CHROOT) /sbin/chkconfig dhcpd on || true
+	$(CHROOT) /sbin/chkconfig rootpassword on
+	$(CHROOT) chmod 755 /etc/init.d/ipsetup
+	$(CHROOT) /sbin/chkconfig ipsetup on
+	echo "root:xensource" | $(CHROOT) chpasswd
+	$(CHROOT) /usr/sbin/useradd -p xensource xenrtd
+	echo "xenrtd:xensource" | $(CHROOT) chpasswd
+	$(CHROOT) mkdir -p /local
+	$(CHROOT) mkdir -p /var/www/html
+	$(CHROOT) mkdir -p /usr/share/xenrt
+	$(CHROOT) mkdir -p /etc/xenrt
+	$(CHROOT) chown -R xenrtd /tftpboot /local /usr/share/xenrt /etc/xenrt
+	$(CHROOT) ln -s /usr/share/xenrt /var/www/html/share
+	$(CHROOT) ln -s /local/scratch/www /var/www/html/export
+	$(CHROOT) ln -s /local/inputs/linux /var/www/html/linux
+	$(CHROOT) ln -s /usr/share/xenrt/control/style.css /var/www/html/style.css
+	$(CHROOT) ln -s /usr/share/xenrt/control/xenrt /usr/bin/xenrt
+	$(CHROOT) ln -s /usr/share/xenrt/exec/main.py /usr/bin/xrt
+	cd $(STAGING)/home/xenrtd ; hg clone http://hg.uk.xensource.com/xenrt.hg
+	$(CHROOT) chown -R xenrtd /home/xenrtd/xenrt.hg
+	# Remove Mercurial stuff
+	#$(CHROOT) rm -rf /home/xenrtd/xenrt.hg/.hg*
+	# Remove keys (NOT TESTED YET!)
+	#$(CHROOT) find /home/xenrtd/xenrt.hg/keys ! -type d -exec rm -f "{}" \;
+	# Set up swap and data files
+	bash mkfs.swap $(XENRT_SWAP_IMAGE) $(XENRT_SWAP_G)
+	bash mkfs.ext3 $(STAGING)/local $(XENRT_DATA_IMAGE) $(XENRT_DATA_G)
+
+	@touch $@
+
 # assemble output package from staging directory
 $(DOM0_PACKAGE): $(POST_COOKIE) $(MY_MAIN_PACKAGES)/.dirstamp
 	tar --directory $(STAGING) --exclude 'boot/grub' --exclude 'boot/message*' -cjf $@ .
@@ -465,9 +517,26 @@
 	cp $(PROJECT_OUTPUTDIR)/docs/ddk.pdf $(ISO_STAGING)/ddk/ddk.pdf
 	@touch $@
 
+$(call iso-cookie,xenrt): $(OVA_STAGING)/ova.xml
+	mkdir -p $(OVA_STAGING)/$(XENRT_SWAP_DEVICE)
+	mkdir -p $(OVA_STAGING)/$(XENRT_DATA_DEVICE)
+
+	set -ex ; for chunk in $$(seq -f "%09.f" 0 $$(($(XENRT_SWAP_G)-1))) ; do \
+		O=$(OVA_STAGING)/$(XENRT_SWAP_DEVICE)/chunk-$$chunk.gz ; \
+		dd if=$(XENRT_SWAP_IMAGE) bs=1MB count=1000 skip=$${chunk}000 | gzip -v9 > $${O} ; \
+	done
+
+	set -ex ; for chunk in $$(seq -f "%09.f" 0 $$(($(XENRT_DATA_G)-1))) ; do \
+		O=$(OVA_STAGING)/$(XENRT_DATA_DEVICE)/chunk-$$chunk.gz ; \
+		dd if=$(XENRT_DATA_IMAGE) bs=1MB count=1000 skip=$${chunk}000 | gzip -v9 > $${O} ; \
+	done
+
+	@touch $@
+
 # Build ISO
 $(MY_OUTPUT_DIR)/sdk.iso: LABEL := SDK
 $(MY_OUTPUT_DIR)/ddk.iso: LABEL := DDK
+$(MY_OUTPUT_DIR)/xenrt.iso: LABEL := XENRT
 $(ISO): $(ISO_COOKIE) $(MY_OUTPUT_DIR)/.dirstamp
 	mkisofs -joliet -joliet-long -r \
 		-V "$(PRODUCT_BRAND)-$(PRODUCT_VERSION) $(LABEL)" \
diff -r 332407a047fd binary-overlay.xenrt/etc/httpd/conf.d/apt-cacher.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/etc/httpd/conf.d/apt-cacher.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,15 @@
+Alias /apt-cacher /usr/local/share/apt-cacher/lib/apt-cacher.pl
+
+<DirectoryMatch /usr/local/share/apt-cacher/lib/>
+	Options ExecCGI
+	AddHandler cgi-script .pl
+	AllowOverride None
+	order allow,deny
+	allow from all
+</DirectoryMatch>
+
+RewriteEngine on
+RewriteRule ^/debian-security/(.*) /apt-cacher/security.debian.org/$1 [PT]
+RewriteRule ^/debian-amd64/(.*) /apt-cacher/amd64.debian.net/debian-amd64/$1 [PT]
+RewriteRule ^/debian/(.*) /apt-cacher/ftp.us.debian.org/debian/$1 [PT]
+RewriteRule ^/debian-backports/(.*) /apt-cacher/www.backports.org/debian/$1 [PT]
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/etc/apache.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/etc/apache.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,15 @@
+Alias /apt-cacher /usr/local/share/apt-cacher/lib/apt-cacher.pl
+
+<DirectoryMatch /usr/local/share/apt-cacher/lib/>
+	Options ExecCGI
+	AddHandler cgi-script .pl
+	AllowOverride None
+	order allow,deny
+	allow from all
+</DirectoryMatch>
+
+RewriteEngine on
+RewriteRule ^/debian-security/(.*) /apt-cacher/security.debian.org/$1 [PT]
+RewriteRule ^/debian-amd64/(.*) /apt-cacher/amd64.debian.net/debian-amd64/$1 [PT]
+RewriteRule ^/debian/(.*) /apt-cacher/ftp.us.debian.org/debian/$1 [PT]
+RewriteRule ^/debian-backports/(.*) /apt-cacher/www.backports.org/debian/$1 [PT]
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/etc/apt-cacher.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/etc/apt-cacher.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,95 @@
+#################################################################
+# This is the config file for apt-cacher. On most Debian systems
+# you can safely leave the defaults alone.
+#################################################################
+
+# cache_dir is used to set the location of the local cache. This can
+# become quite large, so make sure it is somewhere with plenty of space.
+cache_dir=/local/apt-cache
+
+# The email address of the administrator is displayed in the info page
+# and traffic reports.
+admin_email=admin@example.com
+
+# If your apt-cacher machine is directly exposed to the Internet and you are
+# worried about unauthorised machines fetching packages through it, you can
+# specify a list of IPv4 addresses which are allowed to use it and another
+# list of IPv4 addresses which aren't.
+# Localhost (127.0.0.1) is always allowed. Other addresses must be matched
+# by allowed_hosts and not by denied_hosts to be permitted to use the cache.
+# Setting allowed_hosts to "*" means "allow all".
+# Otherwise the format is a comma-separated list containing addresses,
+# optionally with masks (like 10.0.0.0/22), or ranges of addresses (two
+# addresses separated by a hyphen, no masks, like '192.168.0.3-192.168.0.56').
+allowed_hosts=*
+denied_hosts=
+
+# And similiarly for IPv6 with allowed_hosts_6 and denied_hosts_6.
+# Note that IPv4-mapped IPv6 addresses (::ffff:w.x.y.z) are truncated to
+# w.x.y.z and are handled as IPv4.
+allowed_hosts_6=fec0::/16
+denied_hosts_6=
+
+# This thing can be done by Apache but is much simplier here - limit access to
+# Debian mirrors based on server names in the URLs
+#allowed_locations=ftp.uni-kl.de,ftp.nerim.net,debian.tu-bs.de
+
+# Apt-cacher can generate usage reports every 24 hours if you set this
+# directive to 1. You can view the reports in a web browser by pointing
+# to your cache machine with '/apt-cacher/report' on the end, like this:
+#      http://yourcache.example.com/apt-cacher/report
+# Generating reports is very fast even with many thousands of logfile
+# lines, so you can safely turn this on without creating much 
+# additional system load.
+generate_reports=0
+
+# Apt-cacher can clean up its cache directory every 24 hours if you set
+# this directive to 1. Cleaning the cache can take some time to run
+# (generally in the order of a few minutes) and removes all package
+# files that are not mentioned in any existing 'Packages' lists. This
+# has the effect of deleting packages that have been superseded by an
+# updated 'Packages' list.
+clean_cache=0
+
+# The directory to use for apt-cacher access and error logs.
+# The access log records every request in the format:
+# date-time|client ip address|HIT/MISS/RELOAD|object size|object name
+# The error log is slightly more free-form, and is also used for debug
+# messages if debug mode is turned on.
+# Note that the old 'logfile' and 'errorfile' directives are
+# deprecated: if you set them explicitly they will be honoured, but it's
+# better to just get rid of them from old config files.
+logdir=/var/log/httpd/apt-cache
+
+# apt-cacher can use different methods to decide whether package lists need to
+# be updated,
+# A) looking at the age of the cached files
+# B) getting HTTP header from server and comparing that with cached data. This
+# method is more reliable and avoids desynchronisation of data and index files
+# but needs to transfer few bytes from the server every time somebody requests
+# the files ("apt-get update")
+# Set the following value to the maximum age (in hours) for method A or to 0
+# for method B
+expire_hours=0
+
+# Apt-cacher can pass all its requests to an external http proxy like
+# Squid, which could be very useful if you are using an ISP that blocks
+# port 80 and requires all web traffic to go through its proxy. The
+# format is 'hostname:port', eg: 'proxy.example.com:8080'.
+http_proxy=proxy.example.com:8080
+
+# Use of an external proxy can be turned on or off with this flag.
+# Value should be either 0 (off) or 1 (on):
+use_proxy=0
+
+# Rate limiting sets the maximum bandwidth in bytes per second to use
+# for fetching packages. Syntax is fully defined in 'man wget'.
+# Use 'k' or 'm' to use kilobits or megabits / second: eg, 'limit=25k'.
+# Use 0 or a negative value for no rate limiting.
+limit=0
+
+# Debug mode makes apt-cacher spew a lot of extra debug junk to the
+# error log (whose location is defined with the 'logdir' directive).
+# Leave this off unless you need it, or your error log will get very
+# big. Acceptable values are 0 or 1.
+debug=0
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/etc/checksumming.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/etc/checksumming.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,8 @@
+# To enable data checksumming, install libdbd-sqlite3-perl and uncomment the
+# line below. Then wait untill the Packages/Sources files have been refreshed
+# once (and so the database has been built up). You can also nuke them in the
+# cache to trigger the update.
+# require '/usr/share/apt-cacher/apt-cacher-lib-cs.pl';
+
+# don't touch the following line
+1;
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-cleanup.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-cleanup.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,145 @@
+#!/usr/bin/perl -w
+
+# apt-cacher-cleanup.pl
+# Script to clean the cache for the Apt-cacher package caching system.
+# For more information visit www.apt-cacher.org
+#
+# Copyright (C) 2005, Eduard Bloch <blade@debian.org>
+# Copyright (C) 2002-03, Jonathan Oxer <jon@debian.org>
+# Portions  (C) 2002, Jacob Lundberg <jacob@chaos2.org>
+# Distributed under the terms of the GNU Public Licence (GPL).
+
+
+# add one argument like 1 to make it verbose
+
+# do locking, not loosing files because someone redownloaded the index files
+# right then
+# use IO::Handle;
+use Fcntl ':flock';
+use IO::Handle;
+use POSIX;
+
+for(@ARGV) {
+   if($_ eq "-n") { $nice_mode=1; }
+   elsif ($_ eq "-v") { $verbose=1;}
+   else {
+      die <<EOM
+Usage: $0 [ -n ] [ -v ]
+      -n : nice mode, refresh index files first, then renice to 20 and continue
+      -v : verbose mode
+EOM
+      ;
+   }
+}
+
+sub printmsg {
+   print @_ if $verbose;
+}
+
+#use strict;
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/usr/local/share/apt-cacher/etc/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# check whether we're actually meant to clean the cache
+if ( $config{clean_cache} ne 1 ) {
+	exit 0;
+}
+
+#############################################################################
+
+my $refresh=1;
+
+#my %valid;
+
+@info = stat $config{cache_dir};
+
+#if ($< != $info[4]) {
+#   $refresh=0;
+#   print "Not running with apt-cacher's user ID, won't refresh the index files.
+#Try sth. like su -c /usr/share/apt-cacherapt-cacher-cleanup.pl www-data
+#";
+#   # that's not critical, will just hurt the apt-qupdate/apt-dupdate users
+#}
+#
+#
+### Preparation of the package lists ########################################
+
+chdir "$config{cache_dir}/packages" && -w "." || die "Could not enter the cache dir";
+
+@ifiles=(<*es.gz>, <*es.bz2>, <*es>);
+for (@ifiles) {
+   printmsg "Processing index: $_\n";
+   die "Someone is cheating, bad filename found: $_" if /[^.\-\w]/;
+
+   # preserve the index files
+   $valid{$_}=1;
+
+   # now refresh them, unless disabled by the setting above
+   if($refresh) {
+      $ENV{"REMOTE_ADDR"}="local";
+      # if the path is stored there, better use that
+      if(-s "../private/$_.complete") {
+         open(my $tmp, "../private/$_.complete");
+         $ENV{"PATH_INFO"}=<$tmp>;
+         close $tmp;
+      }
+      if(!$ENV{"PATH_INFO"}) {
+         my $tmp=$_;
+         $tmp=~s/^/\//;
+         $tmp=~s/_/\//;
+      }
+      if($ENV{"PATH_INFO"}) {
+         system "/usr/local/share/apt-cacher/lib/apt-cacher.pl >/dev/null";
+         # fix the permissions, apt-cacher can have been executed as root
+         chown $info[4], $info[5], $_, "../private/$_.complete", "../headers/$_";
+      }
+   }
+}
+
+setpriority 0, 0, 20 if $nice_mode;
+
+# use the list of config files we already know
+for(@ifiles) { extract_sums($_, \%valid);}
+
+printmsg "Found ".scalar (keys %valid)." valid file entries\n";
+#print join("\n",keys %valid);
+
+for(<*.deb>, <*.bz2>, <*.gz>, <*.dsc>) {
+   if(! defined($valid{$_})) {
+      unlink $_, "../headers/$_", "../private/$_.complete";
+      printmsg "Removing: $_ and company...\n";
+   }
+}
+
+# similar thing for possibly remaining cruft
+chdir "$config{cache_dir}/headers" && -w "." || die "Could not enter the cache dir";
+
+for(<*.deb>, <*.bz2>, <*.gz>, <*.dsc>) {
+   if(! defined($valid{$_})) {
+      unlink $_, "../private/$_.complete";
+      printmsg "Removing: $_ and company...\n";
+   }
+}
+
+chdir "$config{cache_dir}/private" && -w "." || die "Could not enter the cache dir";
+for(<*.deb.complete>, <*.bz2.complete>, <*.gz.complete>, <*.dsc.complete>) {
+   s/.complete$//;
+   if(! defined($valid{$_})) {
+      printmsg "Removing: $_.complete\n";
+      unlink "$_.complete";
+   }
+}
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-format-transition.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-format-transition.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,36 @@
+#!/usr/bin/perl
+die "Please specify the cache directory!\n" if !$ARGV[0];
+
+chdir $ARGV[0] || die "Could not enter the cache directory!";
+
+@info = stat("private");
+
+mkdir "packages";
+mkdir "headers";
+chown $info[4], $info[5], "packages", "headers";
+
+for $fname (<*.deb>, <*pgp>, <*gz>, <*bz2>, <*Release>) {
+   my $data=0;
+   my $size=0;
+   open(in, $fname);
+   open(daten, ">packages/$fname");
+   open(header, ">headers/$fname");
+   while(<in>) {
+      if($data) { print daten $_; next; };
+      print header $_;
+      $size=$1 if /^Content-Length: (\d+)/;
+      $data=1 if /^$/;
+   }
+   close(daten);
+   close(header);
+   @statinfo = stat("packages/$fname");
+   if($size == $statinfo[7]) {
+      chown $info[4], $info[5], "packages/$fname", "headers/$fname";
+      utime $statinfo[9], $statinfo[9], "packages/$fname", "headers/$fname";
+      unlink $fname;
+   }
+   else {
+      unlink "packages/$fname";
+      unlink "headers/$fname";
+   }
+}
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-import.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-import.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,121 @@
+#!/usr/bin/perl -w
+
+# apt-cacher-import.pl
+# Script to import .deb packages into the Apt-cacher package caching system.
+# This script does not need to be run when setting up Apt-cacher for the first
+# time: its purpose is to initialise .deb packages that have been copied in
+# from some other source, such as a local mirror. Apt-cacher doesn't store
+# it's cached .debs in plain format, it prepends HTTP headers to them to send
+# out to clients when a package is requested. It also keeps track of which
+# packages are fully downloaded by touching a '.complete' file in the 'private'
+# directory in the cache. If .debs are just copied straight into the cache
+# dir Apt-cacher won't use them because it thinks they are both corrupt (no
+# headers) and incomplete (no .complete file). This script allows you to
+# copy a bunch of .debs into an import dir, then run this script to prepend
+# the HTTP headers and touch the .complete file after moving them to the cache
+# dir.
+#
+# Usage:
+# 1. Place your plain debs into /var/cache/apt-cacher/import (or where-ever
+#    you set the cache dir to be)
+# 2. Run this script: /usr/share/apt-cacher-import.pl
+#
+# For more information visit www.apt-cacher.org
+#
+# Copyright (C) 2004, Jonathan Oxer <jon@debian.org>
+# Distributed under the terms of the GNU Public Licence (GPL).
+
+#use strict;
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/usr/local/share/apt-cacher/etc/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+my $private_dir = "$config{cache_dir}/private";
+my $import_dir = "$config{cache_dir}/import";
+my $target_dir = "$config{cache_dir}/packages";
+my $header_dir = "$config{cache_dir}/headers";
+
+my $packagesimported = 0;
+
+#############################################################################
+
+if(!$ARGV[0]) {
+   syswrite(STDOUT, "No import directory specified as the first argument, using $import_dir\n");
+   sleep 2;
+}
+else {
+   $import_dir=$ARGV[0];
+}
+
+die "Cannot write to $target_dir" if !-w $target_dir;
+die "Cannot write to $header_dir" if !-w $header_dir;
+
+@info = stat($private_dir);
+
+# Move to the import dir to chomp on the actual .deb packages
+chdir("$import_dir") || die "apt-cacher-import.pl: can't open the import directory ($import_dir)";
+
+### Loop through all the .debs in the import dir
+foreach $packagefile ( <*.deb>, <*.gz>, <*.bz2> ) {
+	
+	
+	# Get some things we need to insert into the header
+	$headerdate = `date +"%a, %d %b %Y %X %Z"`;
+	$headerdate =~ s/^\s*(.*?)\s*$/$1/;
+	($jk,$jk,$jk,$jk,$jk,$jk,$jk,$headerlength,$jk,$jk,$jk,$jk,$jk) = stat($packagefile);
+	$headeretag = `date +%H%m%s%N`;
+	$headeretag =~ s/^\s*(.*?)\s*$/$1/;
+	#print "d: $headerdate, l: $headerlength, e: $headeretag\n";
+  $frompackagefile=$packagefile; # backup of the original name
+  $packagefile=~s/_\d+%3a/_/;
+		
+	# Generate a header
+	$httpheader = "HTTP/1.1 200 OK
+Date: ".$headerdate."
+Server: Apache \(Unix\) apt-cacher
+Last-Modified: ".$headerdate."
+ETag: \"".$headeretag."\"
+Accept-Ranges: bytes
+Content-Length: ".$headerlength."
+Keep-Alive: timeout=10, max=128
+Connection: Keep-Alive
+Content-Type: application/x-debian-package
+
+"; # there are TWO new lines
+		
+	# Then cat the header to a temp file
+	print "Importing: $packagefile\n";
+  unlink "$header_dir/$packagefile", "$target_dir/$packagefile",  "$private_dir/$packagefile.complete"; # just to be sure
+  rename($frompackagefile, "$target_dir/$packagefile");
+  open($headfile, ">$header_dir/$packagefile");
+  print $headfile $httpheader;
+  close $headfile;
+		
+	$completefile = "$private_dir/$packagefile.complete";
+	open(MF, ">$completefile");
+  close(MF);
+  # copy the ownership of the private directory
+  chown $info[4], $info[5], "$header_dir/$packagefile", "$target_dir/$packagefile",  "$private_dir/$packagefile.complete";
+
+	$packagesimported++;
+}
+
+print "Done.\n";
+print "Packages imported: $packagesimported\n";
+
+# Woohoo, all done!
+exit 0;
+
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-lib-cs.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-lib-cs.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,82 @@
+#! /usr/bin/perl
+
+# this are hooks the overload the methods in apt-cacher-lib.pl and implement
+# data checksumming methods
+
+use DBI;
+use Fcntl ':flock';
+use IO::Handle;
+use POSIX;
+use Digest::MD5 qw(md5_hex);
+
+
+my $ctx;
+my $dbfile;
+my $dbh;
+my $dblck;
+
+sub dbauf {
+   open($dblck, $dbfile);
+   flock($dblck, LOCK_EX);
+   $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","", "",
+   { RaiseError => 1, AutoCommit => 0 } );
+}
+
+sub dbzu {
+   $dbh->disconnect;
+   flock($dblck, LOCK_UN);
+   close($dblck);
+}
+
+# arg: file to be scanned and added to DB
+sub import_sums {
+   my %sumhash;
+   extract_sums(shift, \%sumhash);
+   dbauf();
+   for(keys %sumhash) {
+      #$dbh->do("insert or ignore into sums values(\"$_\", \"$sumhash{sum}\");");
+      $dbh->do("replace into sums values(\"$_\", \"".$sumhash{$_}."\");");
+   }
+   $dbh->commit;
+   dbzu();
+}
+
+sub db_init {
+   $dbfile=shift;
+   if(!-s $dbfile) { 
+      open $db, ">$dbfile"; close $db; # touch it
+      dbauf();
+      $dbh->do("CREATE TABLE sums (file varchar PRIMARY KEY, sum varchar(32) NOT NULL);");
+      $dbh->commit;
+      dbzu();
+   }
+}
+
+# purpose: create hasher object
+sub data_init {
+   $ctx = Digest::MD5->new;
+   return 1;
+}
+
+# purpose: append data to be scanned
+sub data_feed {
+   $ref=shift;
+   $ctx->add($$ref);
+}
+
+# arg: filename
+sub check_sum {
+   my $file=shift;
+   my $digest = $ctx->hexdigest;
+   dbauf();
+   my @sqlar = $dbh->selectrow_array("select sum from sums where file='$file'");
+   dbzu();
+   if(defined($sqlar[0]) && $sqlar[0] ne '') {
+      # now find the faulty deb
+      return ($sqlar[0] eq $digest);
+   }
+   return 1;
+}
+
+
+1;
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,167 @@
+#! /usr/bin/perl
+# This is a library file for Apt-cacher to allow code
+# common to Apt-cacher itself plus its supporting scripts
+# (apt-cacher-report.pl and apt-cacher-cleanup.pl) to be
+# maintained in one location.
+
+# This function reads the given config file into the
+# given hash ref. The key and value are separated by
+# a '=' and will have all the leading and trailing 
+# spaces removed.
+sub read_config
+{
+	# set the default config variables
+	my $config = {
+			cache_dir => '/var/log/cache/apt-cacher',
+			logdir => '/var/log/apt-cacher',
+			admin_email => 'root@localhost',
+			generate_reports => 0,
+			expire_hours => 36,
+			http_proxy => 'proxy.example.com:8080',
+			use_proxy => 0,
+			debug => 0,
+			clean_cache => 0,
+	};
+
+	($config_file) = @_;
+
+	open CONFIG, $config_file or die $!;
+
+	while (<CONFIG>)
+	{
+		s/#.*$//;	# kill off comments
+		s/^\s+//;	# kill off leading spaces
+		s/\s+$//;	# kill off trailing spaces
+		if ($_)
+		{
+			my ($key, $value) = split(/\s*=\s*/);	# split into key and value pair
+			$value = 0 unless ($value);
+			#print "key: $key, value: $value\n";
+			$config->{$key} = $value;
+			#print "$config{$key}\n";
+		}
+	}
+
+	close CONFIG;
+
+	return $config;
+}
+
+# Convert a human-readable IPv4 address to raw form (4-byte string)
+# Returns undef if the address is invalid
+sub ipv4_normalise ($)
+{
+	return undef if $_[0] =~ /:/;
+	my @in = split (/\./, $_[0]);
+	return '' if $#in != 3;
+	my $out = '';
+	foreach my $num (@in)
+	{
+		return undef if $num !~ /^[[:digit:]]{1,3}$/o;
+		$out .= pack ("C", $num);
+	}
+	return $out;
+}
+
+# Convert a human-readable IPv6 address to raw form (16-byte string)
+# Returns undef if the address is invalid
+sub ipv6_normalise ($)
+{
+	return "\0" x 16 if $_[0] eq '::';
+	return undef if $_[0] =~ /^:[^:]/  || $_[0] =~ /[^:]:$/ || $_[0] =~ /::.*::/;
+	my @in = split (/:/, $_[0]);
+	return undef if $#in > 7;
+	shift @in if $#in >= 1 && $in[0] eq '' && $in[1] eq ''; # handle ::1 etc.
+	my $num;
+	my $out = '';
+	my $tail = '';
+	while (defined ($num = shift @in) && $num ne '')
+	{
+		return undef if $num !~ /^[[:xdigit:]]{1,4}$/o;
+		$out .= pack ("n", hex $num);
+	}
+	foreach $num (@in)
+	{
+		return undef if $num !~ /^[[:xdigit:]]{1,4}$/o;
+		$tail .= pack ("n", hex $num);
+	}
+	my $l = length ($out.$tail);
+	return $out.("\0" x (16 - $l)).$tail if $l < 16;
+	return $out.$tail if $l == 16;
+	return undef;
+}
+
+# Make a netmask from a CIDR network-part length and the IP address length
+sub make_mask ($$)
+{
+	my ($mask, $bits) = @_;
+	return undef if $mask < 0 || $mask > $bits;
+	my $m = ("\xFF" x ($mask / 8));
+	$m .= chr ((-1 << (8 - $mask % 8)) & 255) if $mask % 8;
+	return $m . ("\0" x ($bits / 8 - length ($m)));
+}
+
+sub extract_sums {
+   $_=shift;
+   $hashref=shift;
+
+   my ($cat, $listpipe);
+   $cat = (/bz2$/ ? "bzcat" : (/gz$/ ? "zcat" : "cat"));
+
+   # lock it or wait
+   open($lck, $_);
+   flock($lck, LOCK_EX);
+
+   open($listpipe, "-|", $cat, $_);
+   my $file;
+   while(<$listpipe>) {
+      if(/^\s(\w{32})\s\d+\s(\S+)\n/) {
+         $sum=$1;
+         $file=$2;
+      }
+      elsif(/^MD5sum:\s+(.*)$/) {
+         $sum=$1;
+      }
+      elsif(/^Filename:\s+(.*)$/) {
+         $file=$1;
+         $file=~s/.*\///;
+      }
+      if(defined($file) && defined($sum)) {
+         $$hashref{$file}=$sum;
+         undef $file;
+         undef $sum;
+      }
+   };
+   flock($lck, LOCK_UN);
+}
+
+######### HOOKS ###########
+#
+# arg: file to be scanned and added to DB
+sub import_sums {
+   return 1;
+}
+
+# purpose: ?create?, lock the DB file and establish DB connection
+sub db_init {
+   return 1;
+}
+
+# purpose: create hasher object
+sub data_init {
+   return 1;
+}
+
+# purpose: append data to be scanned
+sub data_feed {
+   return 1;
+}
+
+# args: filename only or filename and sum
+sub check_sum {
+   return 1;
+}
+
+
+
+1;
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-report.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher-report.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,231 @@
+#!/usr/bin/perl -w
+
+# apt-cacher-report.pl
+# Script to generate usage reports for the Apt-cacher package caching system.
+#
+# Copyright (C) 2002,2004 Jonathan Oxer <jon@debian.org>
+# Distributed under the terms of the GNU Public Licence (GPL).
+
+#use strict;
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/usr/local/share/apt-cacher/etc/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# check whether we're actually meant to generate a report
+if ( $config{generate_reports} ne 1 ){
+	exit 0;
+}
+
+# Now set some things from the config file
+# $logfile used to be set in the config file: now we derive it from $logdir
+my $logfile = "$config{logdir}/access.log";
+
+
+###################################################
+# Read in the logfiles if they exist, from oldest to newest
+
+# First we look for rolled and compressed logfiles, from
+# /var/log/apt-cacher/access.log.12.gz to access.log.2.gz
+$logcount = 12;
+while ($logcount > 1)
+{
+	if (-f "${logfile}.$logcount.gz") {
+		$logdataraw = `zcat ${logfile}.$logcount.gz`;
+		push (@logdata, split("\n", $logdataraw));
+	}
+	$logcount--;
+}
+
+# Then the immediately rolled (but uncompressed) log
+if (-f "${logfile}.1") {
+	open(LOGFILE, "<${logfile}.1");
+	#@logdata = <LOGFILE>;
+	push(@logdata, <LOGFILE>);
+	close(LOGFILE);
+}
+
+# Then finally the current working log
+if (-f "${logfile}") {
+	open(LOGFILE, "<$logfile");
+	push(@logdata, <LOGFILE>);
+	close(LOGFILE);
+}
+
+#read current time
+($second,$minute,$hour,$day,$month,$year,$null,$null,$null)=localtime(time);
+
+$year = $year + 1900;
+$month=$month + 1;
+
+my $hit_count = 0;
+my $hit_bytes = 0;
+my $miss_count = 0;
+my $miss_bytes = 0;
+
+#parse logfile:
+foreach $logfile_line (@logdata)
+{
+	#$logfile_line =~ s/ /\+/g;
+	@line = split /\|/, $logfile_line;
+	$req_date = $line[0];
+#	$req_ip   = $line[1];
+	$req_result = $line[2];
+	$req_bytes  = $line[3];
+#	$req_object = $line[4];
+
+	$lastrecord = $req_date;
+	if(!$firstrecord) {
+		$firstrecord = $req_date;
+	}
+	if ( $req_result eq "HIT" )
+	{
+		$hit_count++;
+		$hit_bytes += $req_bytes;
+	}
+	else
+	{
+		$miss_count++;
+		$miss_bytes += $req_bytes;
+	}
+
+}
+
+my $total_count = $hit_count + $miss_count;
+
+if($total_count eq 0)
+{
+	$hit_count_percent = 0;
+	$miss_count_percent = 0;
+} else {
+	$hit_count_percent = (int(($hit_count / $total_count) * 10000)) / 100;
+	$miss_count_percent = (int(($miss_count / $total_count) * 10000)) / 100;
+}
+
+$total_bytes = $hit_bytes + $miss_bytes;
+
+##################################################
+# At this point we have hit/miss/total counts, and hit/miss/total traffic
+# So now we need to decide what units to use for each one, and set a
+# human-readable string. Displays as MB unless > 2000MB, in which case it
+# displays as GB.
+# Yes, I know this really should be a subroutine. Sigh. One day. Maybe.
+
+if($total_bytes > 2097152000)
+{
+	$tx = (int(($total_bytes/1073741824) * 1000)) / 1000;
+	$total_trafficstring = "$tx GB";
+} else {
+	$tx = (int(($total_bytes/1048576) * 1000)) / 1000;
+	$total_trafficstring = "$tx MB";
+}
+
+if($hit_bytes > 2097152000)
+{
+        $tx = (int(($hit_bytes/1073741824) * 1000)) / 1000;
+        $hit_trafficstring = "$tx GB";
+} else {
+        $tx = (int(($hit_bytes/1048576) * 1000)) / 1000;
+        $hit_trafficstring = "$tx MB";
+}
+
+if($miss_bytes > 2097152000)
+{
+        $tx = (int(($miss_bytes/1073741824) * 1000)) / 1000;
+        $miss_trafficstring = "$tx GB";
+} else {
+        $tx = (int(($miss_bytes/1048576) * 1000)) / 1000;
+        $miss_trafficstring = "$tx MB";
+}
+
+
+##################################################
+# Set percentages to 0 if no records, otherwise calculate
+if($total_bytes eq 0)
+{
+	$hit_data_percent = 0;
+	$miss_data_percent = 0;
+} else {
+	$hit_data_percent = (int(($hit_bytes / $total_bytes) * 10000)) / 100;
+	$miss_data_percent = (int(($miss_bytes / $total_bytes) * 10000)) / 100;
+}
+
+##################################################
+# If there weren't actually any logfiles processed these will be null, so we'll
+# set them to strings
+if(!$firstrecord)
+{
+	$firstrecord = "unknown";
+}
+if(!$lastrecord)
+{
+	$lastrecord = "unknown";
+}
+
+##################################################
+# spit out the report
+$output = "
+<html>
+<title>Apt-cacher traffic report</title><style type=\"text/css\"><!--
+a { text-decoration: none; }
+a:hover { text-decoration: underline; }
+h1 { font-family: arial, helvetica, sans-serif; font-size: 18pt; font-weight: bold;}
+h2 { font-family: arial, helvetica, sans-serif; font-size: 14pt; font-weight: bold;}
+body, td { font-family: arial, helvetica, sans-serif; font-size: 10pt; }
+th { font-family: arial, helvetica, sans-serif; font-size: 11pt; font-weight: bold; }
+//--></style>
+</head>
+<body>";
+
+#	print "<html><head><title>Apt-cacher traffic report</title></head>\n";
+#	print "<body bgcolor=\"#ffffff\">\n";
+
+$output .= "<p>
+<table border=0 cellpadding=8 cellspacing=1 bgcolor=\"#000000\" align=\"center\" width=\"600\">
+<tr bgcolor=\"#9999cc\"><td> <h1>Apt-cacher traffic report</h1> </td></tr>
+<tr bgcolor=\"#cccccc\"><td>For more information on apt-cacher visit <a href=\"http://packages.debian.org/apt-cacher\">http://packages.debian.org/apt-cacher</a>.
+</td></tr>
+</table>";
+
+$output .= "<h2 align=\"center\">summary</h2>
+<table border=0 cellpadding=3 cellspacing=1 bgcolor=\"#000000\" align=\"center\" width=\"600\">
+<tr bgcolor=\"#9999cc\"><th bgcolor=\"#9999cc\"> Item </th><th> Value </th></tr>
+<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Report generated </td><td> $hour:$minute:$second $day/$month/$year </td></tr>
+<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Administrator </td><td> <a href=\"mailto:$config{admin_email}\">$config{admin_email}</a> </td></tr>";
+$output .= "<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> First request </td><td> $firstrecord </td></tr>";
+$output .= "<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Last request </td><td> $lastrecord </td></tr>";
+$output .= "<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Total requests </td><td> $total_count </td></tr>";
+$output .= "<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Total traffic </td><td> $total_trafficstring </td></tr>";
+$output .= "</table>";
+
+$output .= "<h2 align=\"center\">cache efficiency</h2>
+<table border=0 cellpadding=3 cellspacing=1 bgcolor=\"#000000\" align=\"center\" width=\"600\">
+<tr bgcolor=\"#9999cc\"><th></th><th>Cache hits</th><th>Cache misses</th><th>Total</th></tr>\n
+<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Requests </td><td>$hit_count ($hit_count_percent%)</td><td>$miss_count ($miss_count_percent%)</td><td>$total_count</td></tr>\n
+<tr bgcolor=\"#cccccc\"><td bgcolor=\"#ccccff\"> Transfers </td><td>$hit_trafficstring ($hit_data_percent%)</td><td>$miss_trafficstring ($miss_data_percent%)</td><td>$total_trafficstring</td></tr>\n
+</table>";
+	
+$output .= "</body></html>\n";
+
+#print $output;
+my $report_file = "$config{logdir}/report.html";
+`touch $report_file`;
+open(REPORT,">$report_file") or die;
+print REPORT "$output\n";
+close REPORT;
+
+
+exit 0;
+
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-cacher.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,1075 @@
+#!/usr/bin/perl
+#	apt-cacher.pl - CGI to provide a local cache for debian packages and release files and .deb files
+#
+#  $Revision: 1.11 $
+#  $Source: /xenu/nick/CVS-TREE/Src/Apt-cacher/apt-cacher.pl,v $
+#  $Date: 2002/01/24 23:11:12 $
+#
+#  Usage: run from apache, which provides this environment variable:
+#	PATH_INFO=/www.domain.name/some/path/filename
+
+=head1 NAME
+
+ apt-cacher.pl - CGI to provide a cache for downloaded Debian packages
+
+ Copyright (C) 2001 Nick Andrew <nick@zeta.org.au>
+ Copyright (C) 2002-2004 Jonathan Oxer <jon@debian.org>
+ Copyright (C) 2002 Raphael Goulais <raphael@nicedays.net>
+ Copyright (C) 2002 Jacob Luna Lundberg <jacob@chaos2.org>
+ Copyright (C) 2003 Daniel Stone <dstone@kde.org>
+ Copyright (C) 2003 Adam Moore <adam@ihug.co.nz>
+ Copyright (C) 2003 Andreas Boeckler <abo@netlands.de>
+ Copyright (C) 2003 Stephan Niemz <st.n@gmx.net>
+ Copyright (C) 2005 Darren Salt <linux@youmustbejoking.demon.co.uk>
+ Copyright (C) 2005 Eduard Bloch <blade@debian.org>
+ Distributed under the terms of the GNU Public Licence (GPL).
+
+=head1 SYNOPSIS
+
+ copy apt-cacher.pl to your apache cgi-bin directory
+ ./setup.pl /home/me/cache
+ edit /etc/apt/sources.list
+ apt-get update
+ apt-get -u upgrade
+
+=head1 DESCRIPTION
+
+If you have two or more Debian GNU/Linux machines on a fast local
+network and you wish to upgrade packages from the Internet, you
+don't want to download every package several times.
+
+apt-cacher.pl is a CGI which will keep a cache on disk of Debian Packages
+and Release files (including .deb files) which have been received from Debian
+distribution servers on the Internet. When an apt-get client issues
+a request for a file to apt-cacher.pl, if the file is already on disk
+it is served to the client immediately, otherwise it is fetched from
+the Internet, saved on disk, and then served to the client. This means
+that several Debian machines can be upgraded but each package need be
+downloaded only once.
+
+To use this CGI you need a web server which supports CGI and a local
+directory with plenty of free space (100 Mbytes or more, depends on the
+requirements of the cache using client systems).
+
+=head1 INSTALLATION
+
+Assuming your web server is called B<www.myserver.com:80>
+and your cache directory is called B</home/me/cache>, then:
+
+1. Copy apt-cacher.pl to your web server's cgi-bin directory
+
+2. Make sure apt-cacher.pl is executable (chmod a+rx apt-cacher.pl)
+
+3. Edit apt-cacher.pl and set $cache_dir to /home/me/cache
+
+4. Make sure apt-cacher.pl is ok to run (B<perl -Mstrict -wc apt-cacher.pl>)
+
+5. Run B<./setup.pl /home/me/cache> to create necessary directories
+
+6. Make sure your client machines can access http://www.myserver.com:80/cgi-bin/apt-cacher.pl
+
+If the CGI is executed without arguments, it will return a text/plain
+error message.
+
+7. Edit your /etc/apt/sources.list files, as follows. Where a line says
+something like:
+
+deb http://http.us.debian.org/debian testing main contrib non-free
+
+change this to:
+
+deb http://www.myserver.com:80/cgi-bin/apt-cacher.pl/http.us.debian.org/debian testing main contrib non-free
+
+8. Do "apt-get update" as root. This will prime the cache directory with the
+Package or Package.gz and Release files from the servers you used to use
+directly.
+
+9. Do "ls -laR /home/me/cache" to verify that files have been received and
+stored. The "/home/me/cache/tmp" directory should be empty after downloads
+have completed.
+
+10. Do "apt-get update; apt-get -u upgrade" to start upgrading each machine.
+
+=head1 CACHE DIRECTORY CONTENTS
+
+apt-cacher.pl considers all .deb files with exactly the same filename
+should be the same package (for example vim-rt_5.8.007-4_all.deb) no
+matter where they are downloaded from, so these files are stored in
+the cache directory using just the filename.
+
+Packages and Release files (including Packages.gz) are potentially
+different for every server and directory, so these files are stored
+in the cache directory with the full hostname and path to the file,
+with all slashes B</> changed to underscores B<_> (in the same
+manner as apt-get names the files in B</var/lib/apt/lists>).
+
+=head1 BUGS and FEATURES
+
+1. Only HTTP is supported at present (i.e. apt-cacher.pl cannot access an
+FTP URL)
+
+2. apt-cacher.pl probably only works with the Apache webserver, because
+it relies on the webserver supplying the PATH_INFO environment variable. There
+is alternative method with standard compliant CGI environment but it needs more
+testing, and it needs additonal config on the client side to work around APT's
+bugs.
+
+3. apt-cacher.pl uses B<curl> to retrieve files, so wget must be
+installed.
+
+4. (this bug has been squashed)
+
+5. (this bug has been squashed)
+
+6. (this bug has been squashed)
+
+7. (this bug has been squashed)
+
+8. apt-get can resume a partial failed transfer, however apt-cacher.pl
+cannot.
+
+9. (fixed)
+
+10. (fixed)
+
+11. (fixed)
+
+12. (this bug has been squashed)
+
+=head1 ENVIRONMENT VARIABLES
+
+B<PATH_INFO> is used to find the full URL for the requested file
+
+B<QUERY_STRING> fallback path to get host/url from, for non-apache http daemons
+
+=head1 UPDATES
+
+Please email bug fixes and enhancements using Debian's bug tracking system, http://bugs.debian.org/.
+
+=cut
+# ----------------------------------------------------------------------------
+# use strict;
+use warnings;
+# Set the version number (displayed on the info page)
+my $version='0.8.6';
+
+my $path = $ENV{PATH_INFO};
+
+my $addq='';
+if(!$path) {
+   $path = $ENV{QUERY_STRING};
+   $addq = '?';
+}
+
+
+my @index_files = (
+	'Packages.gz',
+	'Packages.bz2',
+	'Release',
+	'Release.gpg',
+	'Sources.gz',
+	'Sources.bz2',
+	'Contents-.+\.gz',
+);
+my $index_files_regexp = '(' . join('|', @index_files) . ')$';
+
+
+# Include the library for the config file parser
+require '/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl';
+require '/usr/local/share/apt-cacher/etc/checksumming.conf';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/usr/local/share/apt-cacher/etc/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# Now set some things from the config file
+# $logfile used to be set in the config file: now we derive it from $logdir
+$config{logfile} = "$config{logdir}/access.log";
+
+# $errorfile used to be set in the config file: now we derive it from $logdir
+$config{errorfile} = "$config{logdir}/error.log";
+
+# don't block access unless explicitely requrested. This was the old default behaviour.
+$config{allowed_hosts_6} = '*' if !defined($config{allowed_hosts_6});
+$config{allowed_hosts} = '*' if !defined($config{allowed_hosts});
+
+my $private_dir = "$config{cache_dir}/private";
+my $exlockfile = "$private_dir/exlock";
+my $exlock;
+
+#my $do_lock = 0;
+
+# use IO::Handle;
+use Fcntl ':flock';
+use IO::Handle;
+use POSIX;
+
+#optional checksumming support
+db_init("$config{cache_dir}/md5sums.sl3");
+
+# Output data as soon as we print it
+$| = 1;
+
+# Function prototypes
+sub ipv4_addr_in_list ($$);
+sub ipv6_addr_in_list ($$);
+
+# ----------------------------------------------------------------------------
+# Die if we have not been configured correctly
+die "apt-cacher.pl: No cache_dir directory!\n" if (!-d $config{cache_dir});
+die "apt-cacher.pl: No cache_dir/tmp directory!\n" if (!-d "$config{cache_dir}/tmp");
+die "apt-cacher.pl: No cache_dir/private directory!\n" if (!-d $private_dir);
+
+# ----------------------------------------------------------------------------
+# Let's do some security checking. We only want to respond to clients within an
+# authorised address range (127.0.0.1 and ::1 are always allowed).
+
+my $ip_pass = 1;
+my $ip_fail = 0;
+my $client = $ENV{REMOTE_ADDR};
+my $clientaddr;
+
+# allowed_hosts == '*' means allow all ('' means deny all)
+# denied_hosts == '' means don't explicitly deny any
+# localhost is always accepted
+# otherwise host must be in allowed list and not in denied list to be accepted
+
+if ($client =~ /:/) # IPv6?
+{
+   defined ($clientaddr = ipv6_normalise ($client)) or goto badaddr;
+   if (substr ($clientaddr, 0, 12) eq "\0\0\0\0\0\0\0\0\0\0\xFF\xFF")
+   {
+      $clientaddr = substr ($clientaddr, 12);
+      goto is_ipv4;
+   }
+   elsif ($clientaddr eq "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1")
+   {
+      debug_message("client is localhost");
+   }
+   else
+   {
+      $ip_pass = ($config{allowed_hosts_6} =~ /^\*?$/) ||
+      ipv6_addr_in_list ($clientaddr, 'allowed_hosts_6');
+      $ip_fail = ipv6_addr_in_list ($clientaddr, 'denied_hosts_6');
+   }
+}
+elsif (defined ($clientaddr = ipv4_normalise ($client))) # IPv4?
+{
+   is_ipv4:
+   if ($clientaddr eq "\x7F\0\0\1")
+   {
+      debug_message("client is localhost");
+   }
+   else
+   {
+      $ip_pass = ($config{allowed_hosts} =~ /^\*?$/) ||
+      ipv4_addr_in_list ($clientaddr, 'allowed_hosts');
+      $ip_fail = ipv4_addr_in_list ($clientaddr, 'denied_hosts');
+   }
+}
+else
+{
+   goto badaddr;
+}
+
+# Now check if the client address falls within this range
+if ($ip_pass && !$ip_fail)
+{
+	# Everything's cool, client is in allowed range
+	debug_message("Client $client passed access control rules");
+}
+elsif($client eq "local")
+{
+	# Everything's cool, client is in allowed range
+	debug_message("Client $client passed access control rules");
+}
+else
+{
+	# Bzzzt, client is outside allowed range. Send 'em a 403 and bail.
+	badaddr:
+	debug_message("Alert: client $client disallowed by access control");
+	write_to_server("Status: 403 Access to cache prohibited\n\n");
+	exit(4);
+}
+
+# ----------------------------------------------------------------------------
+# Data also used by child processes
+
+my $unique_filename;
+my $child_pid;
+my $child_completed;
+my $child_rc;
+
+# ----------------------------------------------------------------------------
+
+# $SIG{'PIPE'} = sub { open(E, ">>$cache_dir/errs"); print E "$$ received SIGPIPE\n"; close(E); };
+# $SIG{'PIPE'} = 'IGNORE';
+my $sigpipe_received = 0;
+
+$SIG{'PIPE'} = sub {
+	#print STDERR "--- apt-cacher.pl: received SIGPIPE\n";
+	debug_message("received SIGPIPE");
+	$sigpipe_received = 1;
+};
+
+sub term_handler {
+	#print STDERR "--- apt-cacher.pl: received SIGTERM, terminating\n";
+	debug_message("received SIGTERM, terminating");
+	
+	# Kill the wget process if running and unlink its output file
+
+	kill('TERM', $child_pid) if ($child_pid);
+	unlink($unique_filename) if ($unique_filename);
+	exit(8);
+};
+
+$SIG{'TERM'} = \&term_handler;
+
+$SIG{'QUIT'} = sub { writeerrorlog("received SIGQUIT"); };
+$SIG{'INT'}  = sub { writeerrorlog("received SIGINT");  };
+
+#$SIG{'CHLD'} = sub {
+#	#print STDERR "--- apt-cacher.pl: received SIGCHLD\n";
+#	debug_message("received SIGCHLD");
+#	wait();
+#	$child_rc = $?;
+#	# undef $child_pid;
+#	$child_completed = 1;
+#	$moo = getpid();
+#	if(!$child_pid) { $child_pid = "null"; }
+#	debug_message("pids are $moo - $child_pid - child_rc is $child_rc");
+#};
+
+#print STDERR "\n--- apt-cacher.pl: called with $path\n";
+debug_message("called with $path");
+
+#$debug = 1 if (-f "$cache_dir/debug");
+
+`touch $exlockfile` if ! -f $exlockfile;
+
+# Who t.f. really needs that?
+#if ($do_lock) {
+#	open(LOCK, ">$config{cache_dir}/lock") or die "apt-cacher.pl: Unable to open $config{cache_dir}/lock for write: $!\n";
+#	if (!flock(LOCK, LOCK_EX)) {
+#		debug_message("unable to achieve a lock on $config{cache_dir}/lock: $!");
+#		die "Unable to achieve lock on $config{cache_dir}/lock: $!\n";
+#	}
+#
+#	#print STDERR "--- apt-cacher.pl: Lock achieved\n";
+#	debug_message("lock achieved");
+#	# keep LOCK open so that at most one apt-cacher.pl can be running at any time
+#}
+
+
+# Now parse the path
+if ($path =~ /^\/?report/) {
+       usage_report();
+       exit(0);
+}
+
+if ($path !~ m(^/?.+/.+)) {
+	usage_error();
+	exit(4);
+}
+
+
+my($host,$uri) = ($path =~ m(^/?([^/]+)(/.+)));
+
+if ($host eq '' || $uri eq '') {
+	usage_error();
+	exit(4);
+}
+
+my ($filename) = ($uri =~ /\/?([^\/]+)$/);
+my $new_filename;
+
+my $is_open = 0;	# Is the file currently open by us?
+my $is_incomplete = 0;	# Is the file contents complete?
+
+if(defined($config{allowed_locations})) {
+   my $mess;
+   if ("$host$uri" =~ /\.\./){
+      $mess = "'..' contained in URL";
+   } else {
+      for(split(/,/,$config{allowed_locations})) {
+         goto location_allowed if ("$host$uri" =~ /^$_/);
+      }
+      $mess = "Host '$host' is not configured in the allowed_locations directive";
+   }
+   badguy:
+   debug_message("$mess; access denied");
+   write_to_server("Status: 403 Forbidden.\n\n$mess.\n\n");
+   exit(4);
+}
+location_allowed:
+
+my $do_import=0;
+
+if ($filename =~ /(\.deb|\.rpm|\.dsc|\.tar\.gz|\.diff\.gz|\.udeb)$/) {
+	# We must be fetching a .deb or a .rpm, so let's cache it.
+	# Place the file in the cache with just its basename
+	$new_filename = $filename;
+	debug_message("new filename with just basename: $new_filename");
+} elsif ($filename =~ /$index_files_regexp/) {
+	# It's a Packages.gz or related file: make a long filename so we can cache these files without
+	# the names colliding
+	$new_filename = "$host$uri";
+	$new_filename =~ s/\//_/g;
+  debug_message("new long filename: $new_filename");
+  # optional checksumming support
+  if ($filename =~ /(Packages|Sources)/) {
+     # warning, an attacker could poison the checksum cache easily
+     $do_import=1;
+  }
+} else {
+	# Maybe someone's trying to use us as a general purpose proxy / relay.
+	# Let's stomp on that now.
+	debug_message("Sorry, not allowed to fetch that type of file: $filename");
+	write_to_server("Status: 403 Forbidden. Not allowed to fetch that type of file\n\n");
+	exit(4);
+}
+
+my $cached_file = "$config{cache_dir}/packages/$new_filename";
+my $cached_head = "$config{cache_dir}/headers/$new_filename";
+my $errflagfile = "$cached_head.error";
+
+debug_message("looking for $cached_file");
+
+if ($filename =~ /$index_files_regexp/) {
+	debug_message("known as index file: $filename");
+#  setlock; global lock used here sucks, to deep impact on performance for possible (low) risk scenarios
+	if (-f _) {
+     if($config{expire_hours} > 0) {
+        my $now = time();
+        my @stat = stat($cached_file);
+        if (@stat && int(($now - $stat[9])/3600) > $config{expire_hours}) {
+           #print STDERR "--- Unlinking $new_filename because it is too old\n";
+           debug_message("unlinking $new_filename because it is too old");
+           # Set the status to EXPIRED so the log file can show it was downloaded again
+           $cache_status = "EXPIRED";
+           debug_message("$cache_status");
+           unlink $cached_file, $cached_head, "$private_dir/$new_filename.complete";
+        }
+     }
+     else {
+        # use HTTP timestamping
+        my ($oldhead, $testfile, $newhead);
+        open(my $fhead, "-|", "/usr/bin/curl", "-I", "http://$host$uri", '-D-', '--stderr', "/dev/null");
+        while(<$fhead>) {
+           $newhead = $1 if /.*Last-Modified:([^\n\r]+).*/;
+        }
+        close($fhead);
+
+        if(open($testfile, $cached_head)) {
+           for(<$testfile>){
+              if(/^.*Last-Modified:(.*)(\r|\n)/) {
+                 $oldhead = $1;
+                 last
+              }
+           }
+           close($testfile);
+        }
+        if($oldhead && $newhead && ($oldhead eq $newhead) ) {
+           # that's ok
+           debug_message("remote file not changed, $oldhead vs. $newhead");
+        }
+        else {
+           #print STDERR "--- Unlinking $new_filename because it is too old\n";
+           debug_message("unlinking $new_filename because it differs from server's version");
+           $cache_status = "EXPIRED";
+           debug_message("$cache_status");
+           unlink $cached_file, $cached_head, "$private_dir/$new_filename.complete";
+        }
+     }
+  }
+#  unlock;
+}
+
+&setlock; # better lock such things to reduce risk from cludges
+if (!-f $cached_file) {
+	# File does not exist, so try to create it
+	# KLUDGE ... probably a race condition here
+	unlink("$private_dir/$new_filename.complete");
+	#print STDERR "--- File does not exist, create it\n";
+	debug_message("file does not exist, creating it");
+	# Set the status to MISS so the log file can show it had to be downloaded
+	$cache_status = "MISS";
+	debug_message("$cache_status");
+	if (sysopen(CF, $cached_file, O_RDWR|O_CREAT|O_EXCL, 0644)) {
+		$is_open = 1;
+	}
+	# If open fails, maybe we came 2nd in a race
+	# ... KLUDGE ... continue here
+} else {
+	# Set the status to HIT so the log file can show it came from cache
+	### check variable scope
+	$cache_status = "HIT";
+	debug_message("$cache_status");
+}
+
+
+
+if (!-f $cached_file) {
+	barf("Tried to create $cached_file, but failed");
+}
+
+# Ok, the file exists. Open it if we didn't already.
+if (!$is_open) {
+	#print STDERR "--- Open $cached_file\n";
+	debug_message("open $cached_file");
+	
+	if (!sysopen(CF, $cached_file, O_RDWR)) {
+		writeerrorlog("unable to open incomplete $cached_file: $!");
+		barf("Unable to open incomplete $cached_file: $!");
+	}
+	$is_open = 1;
+}
+
+# Is it incomplete?
+if (!-f "$private_dir/$new_filename.complete") {
+   $is_incomplete = 1;
+   #print STDERR "--- File is not complete\n";
+   debug_message("file is not complete");
+   if (flock(CF, LOCK_EX|LOCK_NB)) {
+      # file locked, nobody's touching it ...
+      # Have to truncate it, because we can't rely on "resume"
+      truncate(CF, 0);
+      # we can fetch, remove the error file
+      unlink $errflagfile;
+      &try_pickup;
+   }
+}
+
+&unlock; # that must cover the complete checks/creation
+
+# At this point the file is open, and it's either complete or somebody
+# is fetching its contents
+
+
+#print STDERR "--- Starting to return $cached_file\n";
+debug_message("starting to return $cached_file");
+
+my $first_line = 1;
+my($buf,$n);
+my $abort_timer = 300;
+my $nodata_count = 0;
+my $header_printed=0;
+
+
+# reopen the file to not share the lock with the fetcher
+my $fromfile;
+if (!sysopen($fromfile, $cached_file, O_RDWR)) {
+   # don't barf. If there are network problems, they are signaled via errorfile
+   # below, but not here
+#   writeerrorlog("weird, unable to open incomplete $cached_file: $!");
+#   barf("weird, Unable to open incomplete $cached_file: $!");
+}
+
+data_init();
+while (1) {
+	if ($sigpipe_received) {
+		#print STDERR "--- Exit (SIGPIPE)\n";
+		debug_message("exit (SIGPIPE)");
+		exit(4);
+	}
+	
+  my $n=0;
+  my $buf;
+  my @statinfo=stat($cached_head);
+  
+  # 100 should be enough as flag, since
+  # hopefully the headers files are always small enough to be written to the
+  # disk atomicaly
+  if(@statinfo && $statinfo[7]>100) {      
+     $n = sysread($fromfile, $buf, 65536);
+     barf("Oops, read failed!") if (!defined $n);
+  }
+  else {
+     debug_message("no header yet...\n");
+  }
+
+	debug_message("read $n bytes");
+
+	if ($n < 0) {
+		#print STDERR "--- Exit (read fail)\n";
+		debug_message("exit (read failed)");
+		exit(4);
+	}
+
+  my $code;
+  if (-f $errflagfile) {
+     open(my $in, $errflagfile); $code=<$in>;
+     debug_message("exit (file failed, $code)");
+     if(!$header_printed) { # don't return crap, status as data
+        write_to_server("Status: $code Error trying to fetch the file\n\n");
+     }
+     writeaccesslog("MISS", "$new_filename");
+     exit(0);
+  }
+
+  if(!$header_printed && $n>0) {
+     $header_printed=1;
+     # prepend the header in the first chunk
+     my $head;
+     if($cached_head && open(my $in, $cached_head)) {
+        <$in>; # drop the status and date lines
+        $head=join("", <$in>);
+     }
+     if(!$head) {
+        debug_message("Header squashed!");
+        write_to_server("Status: 502 Error trying to fetch the file\n\n");
+        unlink $cached_file; #FIXME
+        exit 0;
+     }
+     write_to_server($head);
+  }
+
+  if ($n == 0) {
+     # if the fetcher is done, we can lock/unlock it
+     if (flock($fromfile, LOCK_EX|LOCK_NB)) {
+        flock($fromfile, LOCK_UN);
+        # Looks like file is complete!
+        # Finish up
+        #print STDERR "--- Exit (file completed)\n";
+        debug_message("exit (file completed)");
+
+        last;
+     }
+
+     $nodata_count += 2;
+     if ($nodata_count >= $abort_timer) {
+        #print STDERR "--- Abort (timeout)\n";
+        debug_message("abort (timeout)");
+        exit(4);
+     }
+     sleep(2);
+     next;
+  }
+
+
+		write_to_server($buf);
+    data_feed(\$buf);
+		#print STDERR "Wrote ", length($buf), " bytes\n" if ($debug);
+		debug_message("wrote " . length($buf) . " bytes");
+}
+
+# Write all the stuff to the log file
+writeaccesslog("$cache_status", "$new_filename");
+if(!check_sum($new_filename)) {
+   debug_message("ALARM! Faulty package in local cache detected! Replacing: $new_filename");
+   unlink $cached_file;
+   exit(4);
+}
+# We're done!
+exit(0);
+
+#####################################################################
+# End of the main program
+#####################################################################
+
+sub barf {
+	my $errs = shift;
+
+	die "--- apt-cacher.pl: Fatal: $errs\n";
+}
+
+sub usage_error {
+	print STDERR "--- apt-cacher.pl: Usage error\n";
+
+	print <<EOF;
+Content-Type: text/html
+Expires: 0
+
+<html>
+<title>Apt-cacher version $version
+</title><style type="text/css"><!--
+a { text-decoration: none; }
+a:hover { text-decoration: underline; }
+h1 { font-family: arial, helvetica, sans-serif; font-size: 18pt; font-weight: bold;}
+h2 { font-family: arial, helvetica, sans-serif; font-size: 14pt; font-weight: bold;}
+body, td { font-family: arial, helvetica, sans-serif; font-size: 10pt; }
+th { font-family: arial, helvetica, sans-serif; font-size: 11pt; font-weight: bold; }
+//--></style>
+</head>
+<body>
+<p>
+<table border=0 cellpadding=8 cellspacing=1 bgcolor="#000000" align="center" width="600">
+<tr bgcolor="#9999cc"><td> <h1>Apt-cacher version $version</h1> </td></tr>
+<tr bgcolor="#cccccc"><td>
+Usage: edit your /etc/apt/sources.list so all your HTTP sources are prepended 
+with the address of your apt-cacher machine and 'apt-cacher', like this:
+<blockquote>deb&nbsp;http://ftp.au.debian.org/debian&nbsp;unstable&nbsp;main&nbsp;contrib&nbsp;non-free</blockquote>
+becomes
+<blockquote>deb&nbsp;http://<b>yourcache.example.com/apt-cacher$addq/</b>ftp.au.debian.org/debian&nbsp;unstable&nbsp;main&nbsp;contrib&nbsp;non-free</blockquote>
+</td></tr>
+</table>
+
+<h2 align="center">config values</h2>
+<table border=0 cellpadding=3 cellspacing=1 bgcolor="#000000" align="center">
+<tr bgcolor="#9999cc"><th> Directive </th><th> Value </th></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> configfile </td><td> $configfile </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> admin_email </td><td> <a href="mailto:$config{admin_email}">$config{admin_email}</a> </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> generate_reports </td><td> $config{generate_reports} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> cache_dir </td><td> $config{cache_dir} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> logfile </td><td> $config{logfile} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> errorfile </td><td> $config{errorfile} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> expire_hours </td><td> $config{expire_hours} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> http_proxy </td><td> $config{http_proxy} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> use_proxy </td><td> $config{use_proxy} </td></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> debug </td><td> $config{debug} </td></tr>
+</table>
+
+<p>
+<h2 align="center">license</h2>
+<table border=0 cellpadding=8 cellspacing=1 bgcolor="#000000" align="center" width="600">
+<tr bgcolor="#cccccc"><td>
+<p>Apt-cacher is free software; you can redistribute it and/or modify it under the terms of the GNU General 
+Public License as published by the Free Software Foundation; either version 2 of the License, or (at your 
+option) any later version.
+
+<p>Apt-cacher is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
+implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
+License for more details.
+
+<p>A copy of the GNU General Public License is available as /usr/share/common-licenses/GPL in the Debian 
+GNU/Linux distribution or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html. You can also 
+obtain it by writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 
+02111-1307, USA.
+</td></tr>
+</table>
+</body>
+</html>
+EOF
+
+}
+
+sub try_pickup {
+
+	my $pid = fork();
+	if ($pid < 0) {
+		barf("fork() failed");
+	}
+
+	if ($pid > 0) {
+		# parent
+		return;
+	}
+
+	# child
+
+	my $url = "http://$host$uri";
+
+  # using curl, but separating the header manually to make sure that it is
+  # stored on disk before the data is stored
+  #
+  debug_message("fetcher: try to pick up $url");
+  @elist=("/usr/bin/curl", '-D-', 
+  '--stderr', "/dev/null",
+  $url);
+
+  # for checksumming
+  data_init();
+
+  # Check whether a proxy is to be used, and set the appropriate environment variable
+  if ( $config{use_proxy} eq 1 && $config{http_proxy}) {
+     push(@elist, "-x", "http://$config{http_proxy}");
+  }
+  # Check if we need to set a rate limiting value: otherwise make it null
+  push(@elist,"--limit-rate", $config{limit}) if ($config{limit} > 0);
+  debug_message("Executing @elist"); 
+  # Run the command we've built up
+  my ($data, $getpipe, $chfd);
+  open($chfd, ">$cached_head");
+  open($getpipe, "-|", @elist);
+  while(<$getpipe>) {
+     if($data) { 
+        data_feed(\$_) if !$do_import; # checksum passed data if not an meta file
+        print CF $_;
+        next ; 
+     }
+     s/\r//;
+     print $chfd $_;
+     if(/^$/) {
+        close($chfd);
+        $data=1;
+     }
+  }
+  close($getpipe);
+  my $rc=($?>>8);
+
+	#print STDERR "--- Pick up $url as $cached_file, return code $rc\n";
+	debug_message("pick up $url as $cached_file, return code $rc");
+
+  # check missmatch or fetcher failure, could not connect the server
+  if(!check_sum($new_filename)) {
+     debug_message("Do00h, checksum mismatch on $new_filename");
+     $rc=123;
+  }
+  if ($rc != 0) {
+     unlink $cached_file, $cached_head;
+     open(MF, ">$errflagfile");
+     print MF 502;
+     close(MF);
+     exit(0);
+  }
+
+  open($tmp, $cached_head);
+  my $code = <$tmp>;
+  $code =~ s/HTTP\S+\s(\d+).*/$1/s;
+  close($tmp);
+  
+  if($code =~ /^[45]/) {
+     open(MF, ">$errflagfile");
+     print MF $code;
+     close(MF);
+     unlink $cached_file, $cached_head;
+     exit(0);
+  }
+
+	# Touch the new file to fix the timestamp (this fixes the bug that was previously
+	# causing apt-cacher to re-download files that it thought had expired, but which
+	# were actually new: thanks Raphael!)
+	my $now = time;
+	utime $now, $now, $cached_file;
+
+	# Now create the file to show the pickup is complete, also store the original URL there
+	open(MF, ">$private_dir/$new_filename.complete");
+  print MF $path;
+	close(MF);
+
+  flock(CF, LOCK_UN); # release it, notifying the readers
+
+  import_sums($cached_file) if $do_import;
+		
+	#print STDERR "--- Fetcher exiting\n";
+	debug_message("fetcher exiting");
+
+	exit(0);
+}
+
+
+# Check if there has been a usage report generated and display it
+sub usage_report{
+	$usage_file = "$config{logdir}/report.html";
+	if (!-f $usage_file) {
+		print <<EOF;
+Content-Type: text/html
+
+<html>
+<title>Apt-cacher traffic report</title><style type="text/css"><!--
+a { text-decoration: none; }
+a:hover { text-decoration: underline; }
+h1 { font-family: arial, helvetica, sans-serif; font-size: 18pt; font-weight: bold;}
+h2 { font-family: arial, helvetica, sans-serif; font-size: 14pt; font-weight: bold;}
+body, td { font-family: arial, helvetica, sans-serif; font-size: 10pt; }
+th { font-family: arial, helvetica, sans-serif; font-size: 11pt; font-weight: bold; }
+//--></style>
+</head>
+<body>
+<table border=0 cellpadding=8 cellspacing=1 bgcolor="#000000" align="center" width="600">
+<tr bgcolor="#9999cc"><td> <h1>Apt-cacher traffic report</h1> </td></tr>
+<tr bgcolor="#cccccc"><td>For more information on apt-cacher visit <a href="http://www.apt-cacher.org/">www.apt-cacher.org</a>.
+</td></tr>
+</table>
+		
+<p><table border=0 cellpadding=3 cellspacing=1 bgcolor="#000000" align="center" width="600">
+<tr bgcolor="#9999cc"><th bgcolor="#9999cc"> An Apt-cacher usage report has not yet been generated </th></tr>
+<tr bgcolor="#cccccc"><td bgcolor="#ccccff"> Reports are generated every 24 hours. If you want reports to be generated, make sure you set '<b>generate_reports=1</b>' in <b>$configfile</b>.</td></tr>
+</table>
+		</body>
+		</html>
+EOF
+
+	}
+	else
+	{
+		my $usage_report = `cat $usage_file`;
+		print <<EOF;
+Content-Type: text/html
+
+		$usage_report
+EOF
+	}
+}
+
+
+# Wrapper to write to the web server, to make it clearer when we are doing so.
+sub write_to_server {
+	my $message = shift;
+  syswrite(STDOUT,$message);
+}
+
+
+# Jon's extra stuff to write the event to a log file.
+sub writeaccesslog {
+	my $cache_status = shift;
+	my $new_filename = shift;
+
+	# The format is 'time|cache status (HIT, MISS or EXPIRED)|client IP address|file size|name of requested file'
+	my $time = localtime;
+  my $client_ip = $ENV{REMOTE_ADDR};
+  my $cached_file = "$config{cache_dir}/packages/$new_filename";
+	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($cached_file);
+	my $file_length = 0;
+  $file_length+=$size if defined($size);
+
+	open(LOGFILE,">>$config{logfile}") or die;
+	print LOGFILE "$time|$client_ip|$cache_status|$file_length|$new_filename\n";
+	close LOGFILE;
+}
+
+# Jon's extra stuff to write errors to a log file.
+sub writeerrorlog {
+	my $message = shift;
+	
+	my $time = localtime;
+	my $client_ip = $ENV{REMOTE_ADDR};
+
+	open(ERRORFILE,">>$config{errorfile}") or die;
+	print ERRORFILE "$time|$client_ip|$message\n";
+	close ERRORFILE;
+}
+
+# IP address filtering.
+sub ipv4_addr_in_list ($$)
+{
+	return 0 if $_[0] eq '';
+	debug_message ("testing $_[1]");
+	return 0 unless $config{$_[1]};
+
+	my ($client, $cfitem) = @_;
+	my @allowed_hosts = split(/,\s*/, $config{$cfitem});
+	for my $ahp (@allowed_hosts)
+	{
+		goto unknown if $ahp !~ /^[-\/,.[:digit:]]+$/;
+
+		# single host
+		if ($ahp =~ /^([^-\/]*)$/)
+		{
+			my $ip = $1;
+			debug_message("checking against $ip");
+			defined ($ip = ipv4_normalise($ip)) or goto unknown;
+			return 1 if $ip eq $client;
+		}
+		# range of hosts (netmask)
+		elsif ($ahp =~ /^([^-\/]*)\/([^-\/]*)$/)
+		{
+			my ($base, $mask) = ($1, $2);
+			debug_message("checking against $ahp");
+			defined ($base = ipv4_normalise($base)) or goto unknown;
+			$mask = ($mask =~ /^\d+$/) ? make_mask ($mask, 32)
+																 : ipv4_normalise ($mask);
+			goto unknown unless defined $mask;
+			return 1 if ($client & $mask) eq ($base & $mask);
+		}
+		# range of hosts (start & end)
+		elsif ($ahp =~ /^([^-\/]*)-([^-\/]*)$/)
+		{
+			my ($start, $end) = ($1, $2);
+			debug_message("checking against $start to $end");
+			defined ($start = ipv4_normalise($start)) or goto unknown;
+			defined ($end = ipv4_normalise($end)) or goto unknown;
+			return 1 if $client ge $start && $client le $end;
+		}
+		# unknown
+		else
+		{
+			unknown:
+			debug_message("Alert: $cfitem ($ahp) is bad");
+			write_to_server("Status: 500 Configuration error\n\n");
+			exit(4);
+		}
+	}
+	return 0; # failed
+}
+
+sub ipv6_addr_in_list ($$)
+{
+	return 0 if $_[0] eq '';
+	debug_message ("testing $_[1]");
+	return 0 unless $config{$_[1]};
+
+	my ($client, $cfitem) = @_;
+	my @allowed_hosts = split(/,\s*/, $config{$cfitem});
+	for my $ahp (@allowed_hosts)
+	{
+		goto unknown if $ahp !~ /^[-\/,:[:xdigit:]]+$/;
+
+		# single host
+		if ($ahp =~ /^([^-\/]*)$/)
+		{
+			my $ip = $1;
+			debug_message("checking against $ip");
+			$ip = ipv6_normalise($ip);
+			goto unknown if $ip eq '';
+			return 1 if $ip eq $client;
+		}
+		# range of hosts (netmask)
+		elsif ($ahp =~ /^([^-\/]*)\/([^-\/]*)$/)
+		{
+			my ($base, $mask) = ($1, $2);
+			debug_message("checking against $ahp");
+			$base = ipv6_normalise($base);
+			goto unknown if $base eq '';
+			goto unknown if $mask !~ /^\d+$/ || $mask < 0 || $mask > 128;
+			my $m = ("\xFF" x ($mask / 8));
+			$m .= chr ((-1 << (8 - $mask % 8)) & 255) if $mask % 8;
+			$mask = $m . ("\0" x (16 - length ($m)));
+			return 1 if ($client & $mask) eq ($base & $mask);
+		}
+		# range of hosts (start & end)
+		elsif ($ahp =~ /^([^-\/]*)-([^-\/]*)$/)
+		{
+			my ($start, $end) = ($1, $2);
+			debug_message("checking against $start to $end");
+			$start = ipv6_normalise($start);
+			$end = ipv6_normalise($end);
+			goto unknown if $start eq '' || $end eq '';
+			return 1 if $client ge $start && $client le $end;
+		}
+		# unknown
+		else
+		{
+			unknown:
+			debug_message("Alert: $cfitem ($ahp) is bad");
+			write_to_server("Status: 500 Configuration error\n\n");
+			exit(4);
+		}
+	}
+	return 0; # failed
+}
+
+# Stuff to append debug messages to the error log.
+sub debug_message {
+	if ($config{debug} eq 1) {
+		my $message = shift;
+
+		my $time = localtime;
+		my $client_ip = $ENV{REMOTE_ADDR};
+
+		open(ERRORFILE,">>$config{errorfile}") or die;
+		print ERRORFILE "$time|$client_ip|debug: $message\n";
+		close ERRORFILE;
+	}
+}
+
+sub setlock {
+   open($exlock, $exlockfile);
+   if (!flock($exlock, LOCK_EX)) {
+      debug_message("unable to achieve a lock on $exlockfile: $!");
+      die "Unable to achieve lock on $exlockfile: $!";
+   }
+}
+
+sub unlock {
+   flock($exlock, LOCK_UN);
+}
+
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-precache.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/apt-precache.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,71 @@
+#!/usr/bin/perl
+
+##
+my $curl="curl"; # or echo curl
+
+syswrite(STDOUT,"This is an experimental script. You have been warned.\n");
+
+use strict;
+
+my ($cachedir, $baseurl, $verbose, $prios) = @ARGV;
+die "USAGE: apt-precache apt-cacher-cachedir apt-cacher-base-url [ verbosity forced-prios ]
+Examples:
+apt-precache /var/cache/apt-cacher http://proxy/apt-cacher/
+apt-precache /data/apt-cacher http://proxy/apt-cacher/ 1 required,important
+NOTE: the options may change in the future
+" if ! ($cachedir && $baseurl);
+
+my $tmp=`mktemp`;
+my $pcount=0;
+chomp $tmp;
+
+chdir "$cachedir/packages" || die "cannot enter $cachedir/packages" ;
+
+my %pkgs;
+for (<*>) { my $pn=$_; $pn=~s/_.*//g; $pkgs{$pn}=$_; }
+
+for my $pgz (<*Packages*>) {
+   my $acurl=$pgz;
+   $acurl =~ s!_!/!g;
+   my $pgzurl = "$baseurl/$acurl";
+   $acurl =~ s!^!$baseurl/!;
+   $acurl =~ s!/dists/.*!!; # that sucks, pure guessing
+
+   
+   my ($cat, $listpipe);
+   $_=$pgz;
+   $cat = (/bz2$/ ? "bzcat" : (/gz$/ ? "zcat" : "cat"));
+   
+   print "D: $pgzurl\n" if $verbose;
+   
+   # dl to temp file first, otherwise risking connection timout
+   if((!system "curl", "--stderr", "/dev/null", "-o", $tmp, $pgzurl) && open(pfile,"-|",$cat,$tmp)) {
+
+         my $prio;
+      while(<pfile>) {
+         if(/^Priority:\s+(.*)\n/) { $prio=$1; }
+         if(/^Filename: (.*)\n/) {
+            my $path=$1;
+            s!.*/!!g;
+            my ($file, $name) = (/^(([^\/_]+).*)\n/);
+            if($file && defined($prios)) {
+               if(!-e $file && $prios=~/$prio/) {
+                  print "D: $acurl/$path\n" if $verbose;
+                  system $curl, "-o", "/dev/null", "$acurl/$path";
+               }
+            }
+            elsif($pkgs{$name}) {
+               if(!-e $file) {
+                  $pcount++;
+                  print "D: $acurl/$path\n" if $verbose;
+                  system $curl, "-o", "/dev/null", "$acurl/$path";
+               }
+            }
+         }
+      }
+   }
+}
+
+unlink $tmp;
+
+print "Downloaded: $pcount packages.\n" if $verbose;
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/install.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/install.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,209 @@
+#!/usr/bin/perl -w
+#	@(#) setup.pl -- Setup script for apt-cacher.pl
+#	$ Revision: $
+#	$ Source: $
+#	$ Date: $
+#
+#	Safe to run multiple times; later versions of this script will
+#	remove obsolete directories or files and not touch required
+#	directories or files.
+#
+
+umask 0022;
+
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/local/share/apt-cacher/lib/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/usr/local/share/apt-cacher/etc/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# Now set some things from the config file
+# $logfile used to be set in the config file: now we derive it from $logdir
+$config{logfile} = "$config{logdir}/access.log";
+
+# $errorfile used to be set in the config file: now we derive it from $logdir
+$config{errorfile} = "$config{logdir}/error.log";
+
+my $private_dir = "$config{cache_dir}/private";
+
+################################################
+# Check that the cache_dir has been set and continue on (note: this should never happen
+# because cache_dir is preset to a default value prior to loading the config file)
+die "Warning: config file could not be parsed ($configfile)/ (cache_dir is not set)\n" if ($config{cache_dir} eq '');
+
+
+@info=getpwnam("www-data");
+my @permcmd;
+if(-e $config{cache_dir}) {
+   @permcmd = ("chown", "--reference", $config{cache_dir});
+}
+elsif(@info) {
+   print "Assuming www-data is the user ID used to run apt-cacher\n";
+   @permcmd = ("chown", "$info[2]:$info[3]");
+}
+else {
+   @permcmd = ("/bin/echo", "User account for apt-cacher/http daemon unknown, plese set ownership for the following files manually:");
+}
+
+for ("README", "README.txt") {
+   my $file=$config{cache_dir}."/$_";
+   if (-f $file) {
+      print "Found obsolete file $file - removing.\n";
+      unlink($file);
+   }
+}
+
+foreach my $dir ($config{cache_dir}, $config{logdir}, "$config{cache_dir}/private", "$config{cache_dir}/tmp", "$config{cache_dir}/import", "$config{cache_dir}/packages", "$config{cache_dir}/headers") {
+	if (!-d $dir) {
+		print "Doing mkdir($dir, 0755)\n";
+		mkdir($dir, 0755);
+    system (@permcmd, $dir);
+	}
+	if (!-w $dir) {
+		die "Warning, $dir exists but is not is not writeable for apt-cacher!\n";
+	}
+}
+
+# Remove these directories if they exist (obsolete)
+# later rmdir $cache_dir/tmp, just not now as I may want it in future
+foreach my $rmdir ("$config{cache_dir}/head") {
+	if (-d $rmdir) {
+		print "Doing 'rm -rf $rmdir' (obsolete)\n";
+		system("rm -rf $rmdir");
+	}
+}
+
+# At the moment we need to create empty access and error logs so apt-cacher
+# doesn't barf the first time it's run. Probably should change apt-cacher
+# so it can handle missing logs, and create them itself if required.
+for $file ($config{logfile}, $config{errorfile}) {
+   if(!-e $file) {
+      open(my $tmp, ">$file");
+      close($tmp);
+      system @permcmd, $file;
+   }
+}
+
+# These ownership changes are a cludge: need to make them check httpd.conf for the Apache
+# user and set ownership to that, and do it with Perl instead of shell
+# EB: fsck that, this may simply overwritte changes by the admin
+# `chown -R www-data.www-data $config{cache_dir}`;
+
+# We used to tack a line onto the end of apache.conf. Now we just symlink into conf.d
+if(-d "/etc/apache/conf.d" ){
+	symlink("/etc/apt-cacher/apache.conf","/etc/apache/conf.d/apt-cacher");
+}
+
+if(-d "/etc/apache-ssl/conf.d" ){
+	symlink("/etc/apt-cacher/apache.conf","/etc/apache-ssl/conf.d/apt-cacher");
+}
+
+if(-d "/etc/apache2/conf.d" ){
+	rename("/etc/apache2/conf.d/apt-cacher", "/etc/apache2/conf.d/apt-cacher.conf") || symlink("/etc/apt-cacher/apache.conf","/etc/apache2/conf.d/apt-cacher.conf");
+}
+
+# Apache2 needs the cgi module installed, which it isn't by default.
+if(-d "/etc/apache2/mods-enabled"){
+	symlink("/etc/apache2/mods-available/cgi.load","/etc/apache2/mods-enabled/cgi.load");
+}
+
+
+#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
+# Just for now we still have to try nuking old entries in httpd.conf,
+# because they may have been left behind previously. After a couple
+# more releases this should be removed from here and remove.pl
+
+# Remove the include lines from Apache's httpd.conf
+my $httpdconf = "/etc/apache/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+	if (-f "/etc/init.d/apache")
+	{
+		`/etc/init.d/apache restart`;
+	}
+}
+
+# Remove the include lines from Apache-SSL's httpd.conf
+$httpdconf = "/etc/apache-ssl/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+	if (-f "/etc/init.d/apache-ssl")
+	{
+		`/etc/init.d/apache-ssl restart`;
+	}
+}
+
+# Remove the include lines from Apache2's apache2.conf
+$httpdconf = "/etc/apache2/apache2.conf";
+if (-f $httpdconf) {
+        $old = $httpdconf;
+        $new = "$httpdconf.tmp.$$";
+        $bak = "$httpdconf.bak";
+
+        open(OLD, "< $old")         or die "can't open $old: $!";
+        open(NEW, "> $new")         or die "can't open $new: $!";
+
+        while (<OLD>) {
+                s/# This line has been appended by the Apt\-cacher install script/ /;
+                s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+                (print NEW $_)          or die "can't write to $new: $!";
+        }
+
+        close(OLD)                  or die "can't close $old: $!";
+        close(NEW)                  or die "can't close $new: $!";
+
+        rename($old, $bak)          or die "can't rename $old to $bak: $!";
+        rename($new, $old)          or die "can't rename $new to $old: $!";
+	if (-f "/etc/init.d/apache2")
+	{
+		`/etc/init.d/apache2 restart`;
+	}
+}
+#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+exit(0);
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/remove.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/remove.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,142 @@
+#!/usr/bin/perl -w
+#	@(#) remove.pl -- Remove script for apt-cacher
+#	$ Revision: $
+#	$ Source: $
+#	$ Date: $
+#
+
+my $path = $ENV{PATH_INFO};
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/share/apt-cacher/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/etc/apt-cacher/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# Now set some things from the config file
+# $logfile used to be set in the config file: now we derive it from $logdir
+$config{logfile} = "$config{logdir}/access.log";
+
+# $errorfile used to be set in the config file: now we derive it from $logdir
+$config{errorfile} = "$config{logdir}/error.log";
+
+my $private_dir = "$config{cache_dir}/private";
+
+################################################
+
+# Now set some things from the config file
+$config{reportfile} = "$config{logdir}/report.html";
+
+
+
+# Remove the include lines from Apache's httpd.conf
+# Thankfully this is a lot easier now we're just symlinking our config file!
+if(-d "/etc/apache/conf.d/" ){
+	unlink("/etc/apache/conf.d/apt-cacher");
+}
+
+if(-d "/etc/apache-ssl/conf.d/" ){
+	unlink("/etc/apache-ssl/conf.d/apt-cacher");
+}
+
+if(-d "/etc/apache2/conf.d/" ){
+	unlink("/etc/apache2/conf.d/apt-cacher");
+	unlink("/etc/apache2/conf.d/apt-cacher.conf");
+}
+
+
+# Delete the cache directory and everything in it
+system("rm", "-rf", $config{cache_dir});
+
+# Delete the two log files (leaving the directory behind for now)
+unlink($config{logfile});
+unlink($config{errorfile});
+unlink($config{reportfile});
+
+#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
+# Just for now we still have to try nuking old entries in httpd.conf,
+# because they may have been left behind previously. After a couple
+# more releases this should be removed from here and install.pl
+
+# Remove the include lines from Apache's httpd.conf
+my $httpdconf = "/etc/apache/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+}
+
+# Remove the include lines from Apache-SSL's httpd.conf
+$httpdconf = "/etc/apache-ssl/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+}
+
+# Remove the include lines from Apache2's apache2.conf
+$httpdconf = "/etc/apache2/apache2.conf";
+if (-f $httpdconf) {
+        $old = $httpdconf;
+        $new = "$httpdconf.tmp.$$";
+        $bak = "$httpdconf.bak";
+
+        open(OLD, "< $old")         or die "can't open $old: $!";
+        open(NEW, "> $new")         or die "can't open $new: $!";
+
+        while (<OLD>) {
+                s/# This line has been appended by the Apt\-cacher install script/ /;
+                s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+                (print NEW $_)          or die "can't write to $new: $!";
+        }
+
+        close(OLD)                  or die "can't close $old: $!";
+        close(NEW)                  or die "can't close $new: $!";
+
+        rename($old, $bak)          or die "can't rename $old to $bak: $!";
+        rename($new, $old)          or die "can't rename $new to $old: $!";
+}
+#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+
+exit(0);
diff -r 332407a047fd binary-overlay.xenrt/usr/local/share/apt-cacher/lib/upgrade.pl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/binary-overlay.xenrt/usr/local/share/apt-cacher/lib/upgrade.pl	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,124 @@
+#!/usr/bin/perl -w
+#	@(#) remove.pl -- Upgrade script for apt-cacher
+#	$ Revision: $
+#	$ Source: $
+#	$ Date: $
+# This script is actually almost identical to the remove script, except that
+# on upgrade we don't want to nuke the cache contents so that part is commented
+# out. We also don't want to restart Apache twice (it already gets done by the
+# install script that gets run at the end of the upgrade, and even that's not
+# necessary).
+
+my $path = $ENV{PATH_INFO};
+#############################################################################
+### configuration ###########################################################
+# Include the library for the config file parser
+require '/usr/share/apt-cacher/apt-cacher-lib.pl';
+
+# Read in the config file and set the necessary variables
+my $configfile = '/etc/apt-cacher/apt-cacher.conf';
+
+my $configref;
+eval {
+        $configref = read_config($configfile);
+};
+my %config = %$configref;
+
+# not sure what to do if we can't read the config file...
+die "Could not read config file: $@" if $@;
+
+# Now set some things from the config file
+# $logfile used to be set in the config file: now we derive it from $logdir
+$config{logfile} = "$config{logdir}/access.log";
+
+# $errorfile used to be set in the config file: now we derive it from $logdir
+$config{errorfile} = "$config{logdir}/error.log";
+
+my $private_dir = "$config{cache_dir}/private";
+
+################################################
+
+# Now set some things from the config file
+$config{reportfile} = "$config{logdir}/report.html";
+
+
+
+
+# Remove the include lines from Apache's httpd.conf
+# This should really be turned into a function so I don't have to
+# copy the whole lot for Apache-SSL!
+my $httpdconf = "/etc/apache/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+	
+	## Restart Apache
+	#if ( -f "/etc/init.d/apache" ) {
+	#	print "Restarting Apache (if you have an SSL cert password, enter it now):";
+	#	`/etc/init.d/apache restart`;
+	#	print "... done.\n";
+	#} else {
+	#	print "Apache startup script was not found. Please restart Apache manually.\n";
+	#}
+}
+
+# Remove the include lines from Apache-SSL's httpd.conf
+# This should really be turned into a function so I don't have to
+# copy the whole lot for Apache-SSL!
+$httpdconf = "/etc/apache-ssl/httpd.conf";
+if (-f $httpdconf) {
+	$old = $httpdconf;
+	$new = "$httpdconf.tmp.$$";
+	$bak = "$httpdconf.bak";
+	
+	open(OLD, "< $old")         or die "can't open $old: $!";
+	open(NEW, "> $new")         or die "can't open $new: $!";
+	
+	while (<OLD>) {
+		s/# This line has been appended by the Apt\-cacher install script/ /;
+		s/Include \/etc\/apt\-cacher\/apache.conf/ /;
+		(print NEW $_)          or die "can't write to $new: $!";
+	}
+	
+	close(OLD)                  or die "can't close $old: $!";
+	close(NEW)                  or die "can't close $new: $!";
+	
+	rename($old, $bak)          or die "can't rename $old to $bak: $!";
+	rename($new, $old)          or die "can't rename $new to $old: $!";
+	
+	## Restart Apache-SSL
+	#if ( -f "/etc/init.d/apache-ssl" ) {
+	#	print "Restarting Apache-SSL (if you have an SSL cert password, enter it now):";
+	#	`/etc/init.d/apache-ssl restart`;
+	#	print "... done.\n";
+	#} else {
+	#	print "Apache-SSL startup script was not found. Please restart Apache-SSL manually.\n";
+	#}
+}
+
+
+## Delete the cache directory and everything in it
+#system("rm -rf $config{cache_dir}");
+#
+## Delete the two log files (leaving the directory behind for now)
+#unlink($config{logfile});
+#unlink($config{errorfile});
+#unlink($config{reportfile});
+
+exit(0);
diff -r 332407a047fd mkfs.swap
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mkfs.swap	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,23 @@
+#!/bin/bash
+
+set -e
+
+IMAGE=$1
+SIZE_G=$2
+shift 2
+
+MOUNT=${IMAGE}.mnt
+
+SIZE_B=$((${SIZE_G} * 1000*1000*1000))
+
+if [ -f "${IMAGE}" ] ; then
+    rm -f "${IMAGE}"
+fi
+
+echo "Creating sparse file ${IMAGE} ($SIZE_B bytes)"
+dd if=/dev/zero of=${IMAGE} bs=1 seek=${SIZE_B} count=0 2>/dev/null
+
+echo "Creating swap on ${IMAGE}"
+mkswap ${IMAGE} $@
+
+exit 0
diff -r 332407a047fd overlay.xenrt/boot/grub/menu.lst
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/boot/grub/menu.lst	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,3 @@
+title @PRODUCT_BRAND@ XenRT @PRODUCT_VERSION@
+	kernel /boot/vmlinuz-@KERNEL_VERSION@ root=/dev/@OVA_ROOT_DEVICE@1 ro 
+	initrd /boot/initrd-@KERNEL_VERSION@.img
diff -r 332407a047fd overlay.xenrt/etc/dnsmasq.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/dnsmasq.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,446 @@
+# Configuration file for dnsmasq.
+#
+# Format is one option per line, legal options are the same
+# as the long options legal on the command line. See
+# "/usr/sbin/dnsmasq --help" or "man 8 dnsmasq" for details.
+
+# The following two options make you a better netizen, since they
+# tell dnsmasq to filter out queries which the public DNS cannot
+# answer, and which load the servers (especially the root servers)
+# uneccessarily. If you have a dial-on-demand link they also stop
+# these requests from bringing up the link uneccessarily.
+
+# Never forward plain names (without a dot or domain part)
+#domain-needed
+# Never forward addresses in the non-routed address spaces.
+#bogus-priv
+
+
+# Uncomment this to filter useless windows-originated DNS requests
+# which can trigger dial-on-demand links needlessly.
+# Note that (amongst other things) this blocks all SRV requests,
+# so don't use it if you use eg Kerberos.
+# This option only affects forwarding, SRV records originating for
+# dnsmasq (via srv-host= lines) are not suppressed by it.
+#filterwin2k
+
+# Change this line if you want dns to get its upstream servers from
+# somewhere other that /etc/resolv.conf
+#resolv-file=
+
+# By  default,  dnsmasq  will  send queries to any of the upstream
+# servers it knows about and tries to favour servers to are  known
+# to  be  up.  Uncommenting this forces dnsmasq to try each query
+# with  each  server  strictly  in  the  order  they   appear   in
+# /etc/resolv.conf
+#strict-order
+
+# If you don't want dnsmasq to read /etc/resolv.conf or any other
+# file, getting its servers from this file instead (see below), then
+# uncomment this.
+no-resolv
+
+# If you don't want dnsmasq to poll /etc/resolv.conf or other resolv
+# files for changes and re-read them then uncomment this.
+no-poll
+
+# Add other name servers here, with domain specs if they are for
+# non-public domains.
+#server=/localnet/192.168.0.1
+
+# Example of routing PTR queries to nameservers: this will send all 
+# address->name queries for 192.168.3/24 to nameserver 10.1.2.3
+#server=/3.168.192.in-addr.arpa/10.1.2.3
+
+# Add local-only domains here, queries in these domains are answered
+# from /etc/hosts or DHCP only.
+#local=/localnet/
+
+# Add domains which you want to force to an IP address here.
+# The example below send any host in doubleclick.net to a local
+# webserver.
+#address=/doubleclick.net/127.0.0.1
+
+# If you want dnsmasq to change uid and gid to something other
+# than the default, edit the following lines.
+#user=
+#group=
+
+# If you want dnsmasq to listen for DHCP and DNS requests only on
+# specified interfaces (and the loopback) give the name of the
+# interface (eg eth0) here.
+# Repeat the line for more than one interface.
+#interface=
+# Or you can specify which interface _not_ to listen on
+#except-interface=
+# Or which to listen on by address (remember to include 127.0.0.1 if
+# you use this.)
+#listen-address=
+# If you want dnsmasq to provide only DNS service on an interface,
+# configure it as shown above, and then use the following line to
+# disable DHCP on it.
+#no-dhcp-interface=
+
+# On systems which support it, dnsmasq binds the wildcard address,
+# even when it is listening on only some interfaces. It then discards
+# requests that it shouldn't reply to. This has the advantage of
+# working even when interfaces come and go and change address. If you
+# want dnsmasq to really bind only the interfaces it is listening on,
+# uncomment this option. About the only time you may need this is when
+# running another nameserver on the same machine.
+#bind-interfaces
+
+# If you don't want dnsmasq to read /etc/hosts, uncomment the
+# following line.
+#no-hosts
+# or if you want it to read another file, as well as /etc/hosts, use
+# this.
+#addn-hosts=/etc/banner_add_hosts
+
+# Set this (and domain: see below) if you want to have a domain
+# automatically added to simple names in a hosts-file.
+#expand-hosts
+
+# Set the domain for dnsmasq. this is optional, but if it is set, it
+# does the following things.
+# 1) Allows DHCP hosts to have fully qualified domain names, as long
+#     as the domain part matches this setting.
+# 2) Sets the "domain" DHCP option thereby potentially setting the
+#    domain of all systems configured by DHCP
+# 3) Provides the domain part for "expand-hosts"
+#domain=thekelleys.org.uk
+
+# Uncomment this to enable the integrated DHCP server, you need
+# to supply the range of addresses available for lease and optionally
+# a lease time. If you have more than one network, you will need to
+# repeat this for each network on which you want to supply DHCP
+# service.
+#dhcp-range=192.168.0.50,192.168.0.150,12h
+
+# This is an example of a DHCP range where the netmask is given. This
+# is needed for networks we reach the dnsmasq DHCP server via a relay
+# agent. If you don't know what a DHCP relay agent is, you probably
+# don't need to worry about this.
+#dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h
+
+# This is an example of a DHCP range with a network-id, so that
+# some DHCP options may be set only for this network.
+#dhcp-range=red,192.168.0.50,192.168.0.150
+
+# Supply parameters for specified hosts using DHCP. There are lots
+# of valid alternatives, so we will give examples of each. Note that
+# IP addresses DO NOT have to be in the range given above, they just
+# need to be on the same network. The order of the parameters in these
+# do not matter, it's permissble to give name,adddress and MAC in any order
+
+# Always allocate the host with ethernet address 11:22:33:44:55:66
+# The IP address 192.168.0.60
+#dhcp-host=11:22:33:44:55:66,192.168.0.60
+
+# Always set the name of the host with hardware address
+# 11:22:33:44:55:66 to be "fred"
+#dhcp-host=11:22:33:44:55:66,fred
+
+# Always give the host with ethernet address 11:22:33:44:55:66
+# the name fred and IP address 192.168.0.60 and lease time 45 minutes
+#dhcp-host=11:22:33:44:55:66,fred,192.168.0.60,45m
+
+# Give the machine which says it's name is "bert" IP address
+# 192.168.0.70 and an infinite lease
+#dhcp-host=bert,192.168.0.70,infinite
+
+# Always give the host with client identifier 01:02:02:04
+# the IP address 192.168.0.60
+#dhcp-host=id:01:02:02:04,192.168.0.60
+
+# Always give the host with client identifier "marjorie"
+# the IP address 192.168.0.60
+#dhcp-host=id:marjorie,192.168.0.60
+
+# Enable the address given for "judge" in /etc/hosts
+# to be given to a machine presenting the name "judge" when
+# it asks for a DHCP lease.
+#dhcp-host=judge
+
+# Never offer DHCP service to a machine whose ethernet
+# address is 11:22:33:44:55:66
+#dhcp-host=11:22:33:44:55:66,ignore
+
+# Ignore any client-id presented by the machine with ethernet
+# address 11:22:33:44:55:66. This is useful to prevent a machine
+# being treated differently when running under different OS's or
+# between PXE boot and OS boot.
+#dhcp-host=11:22:33:44:55:66,id:*
+
+# Send extra options which are tagged as "red" to
+# the machine with ethernet address 11:22:33:44:55:66
+#dhcp-host=11:22:33:44:55:66,net:red
+
+# Send extra options which are tagged as "red" to
+# any machine with ethernet address starting 11:22:33:
+#dhcp-host=11:22:33:*:*:*,net:red
+
+# Send extra options which are tagged as "red" to any machine whose
+# DHCP vendorclass string includes the substring "Linux"
+#dhcp-vendorclass=red,Linux
+
+# Send extra options which are tagged as "red" to any machine one
+# of whose DHCP userclass strings includes the substring "accounts"
+#dhcp-userclass=red,accounts
+
+# Send extra options which are tagged as "red" to any machine whose
+# MAC address matches the pattern.
+#dhcp-mac=red,00:60:8C:*:*:*
+
+# If this line is uncommented, dnsmasq will read /etc/ethers and act
+# on the ethernet-address/IP pairs found there just as if they had
+# been given as --dhcp-host options. Useful if you keep
+# MAC-address/host mappings there for other purposes.
+#read-ethers
+
+# Send options to hosts which ask for a DHCP lease.
+# See RFC 2132 for details of available options.
+# Common options can be given to dnsmasq by name: 
+# run "dnsmasq --help dhcp" to get a list.
+# Note that all the common settings, such as netmask and
+# broadcast address, DNS server and default route, are given
+# sane defaults by dnsmasq. You very likely will not need any
+# any dhcp-options. If you use Windows clients and Samba, there
+# are some options which are recommended, they are detailed at the
+# end of this section.
+
+# Override the default route supplied by dnsmasq, which assumes the
+# router is the same machine as the one running dnsmasq.
+#dhcp-option=3,1.2.3.4
+
+# Do the same thing, but using the option name
+#dhcp-option=option:router,1.2.3.4
+
+# Override the default route supplied by dnsmasq and send no default
+# route at all. Note that this only works for the options sent by
+# default (1, 3, 6, 12, 28) the same line will send a zero-length option 
+# for all other option numbers.
+#dhcp-option=3
+
+# Set the NTP time server addresses to 192.168.0.4 and 10.10.0.5
+#dhcp-option=option:ntp-server,192.168.0.4,10.10.0.5
+
+# Set the NTP time server address to be the same machine as
+# is running dnsmasq
+#dhcp-option=42,0.0.0.0
+
+# Set the NIS domain name to "welly"
+#dhcp-option=40,welly
+
+# Set the default time-to-live to 50
+#dhcp-option=23,50
+
+# Set the "all subnets are local" flag
+#dhcp-option=27,1
+
+# Send the etherboot magic flag and then etherboot options (a string).
+#dhcp-option=128,e4:45:74:68:00:00
+#dhcp-option=129,NIC=eepro100
+
+# Specify an option which will only be sent to the "red" network
+# (see dhcp-range for the declaration of the "red" network)
+# Note that the net: part must precede the option: part.
+#dhcp-option = net:red, option:ntp-server, 192.168.1.1
+
+# The following DHCP options set up dnsmasq in the same way as is specified
+# for the ISC dhcpcd in
+# http://www.samba.org/samba/ftp/docs/textdocs/DHCP-Server-Configuration.txt
+# adapted for a typical dnsmasq installation where the host running
+# dnsmasq is also the host running samba.
+# you may want to uncomment them if you use Windows clients and Samba.
+#dhcp-option=19,0           # option ip-forwarding off
+#dhcp-option=44,0.0.0.0     # set netbios-over-TCP/IP nameserver(s) aka WINS server(s)
+#dhcp-option=45,0.0.0.0     # netbios datagram distribution server
+#dhcp-option=46,8           # netbios node type
+#dhcp-option=47             # empty netbios scope.
+
+# Send RFC-3397 DNS domain search DHCP option. WARNING: Your DHCP client
+# probably doesn't support this......
+#dhcp-option=option:domain-search,eng.apple.com,marketing.apple.com
+
+# Send RFC-3442 classless static routes (note the netmask encoding)
+#dhcp-option=121,192.168.1.0/24,1.2.3.4,10.0.0.0/8,5.6.7.8
+
+# Send vendor-class specific options encapsulated in DHCP option 43. 
+# The meaning of the options is defined by the vendor-class so
+# options are sent only when the client supplied vendor class
+# matches the class given here. (A substring match is OK, so "MSFT" 
+# matches "MSFT" and "MSFT 5.0"). This example sets the
+# mtftp address to 0.0.0.0 for PXEClients.
+#dhcp-option=vendor:PXEClient,1,0.0.0.0
+
+# Send microsoft-specific option to tell windows to release the DHCP lease
+# when it shuts down. Note the "i" flag, to tell dnsmasq to send the
+# value as a four-byte integer - that's what microsoft wants. See
+# http://technet2.microsoft.com/WindowsServer/en/library/a70f1bb7-d2d4-49f0-96d6-4b7414ecfaae1033.mspx?mfr=true
+#dhcp-option=vendor:MSFT,2,1i
+
+# Send the Encapsulated-vendor-class ID needed by some configurations of
+# Etherboot to allow is to recognise the DHCP server.
+#dhcp-option=vendor:Etherboot,60,"Etherboot"
+
+# Send options to PXELinux. Note that we need to send the options even
+# though they don't appear in the parameter request list, so we need
+# to use dhcp-option-force here. 
+# See http://syslinux.zytor.com/pxe.php#special for details.
+# Magic number - needed before anything else is recognised
+#dhcp-option-force=208,f1:00:74:7e
+# Configuration file name
+#dhcp-option-force=209,configs/common
+# Path prefix
+#dhcp-option-force=210,/tftpboot/pxelinux/files/
+# Reboot time. (Note 'i' to send 32-bit value)
+#dhcp-option-force=211,30i
+
+# Set the boot filename for BOOTP. You will only need 
+# this is you want to boot machines over the network and you will need
+# a TFTP server; either dnsmasq's built in TFTP server or an
+# external one. (See below for how to enable the TFTP server.)
+#dhcp-boot=pxelinux.0
+
+# Enable dnsmasq's built-in TFTP server
+#enable-tftp
+
+# Set the root directory for files availble via FTP.
+#tftp-root=/var/ftpd
+
+# Make the TFTP server more secure: with this set, only files owned by
+# the user dnsmasq is running as will be send over the net.
+#tftp-secure
+
+# Set the boot file name only when the "red" tag is set.
+#dhcp-boot=net:red,pxelinux.red-net
+
+# An example of dhcp-boot with an external server: the name and IP
+# address of the server are given after the filename.
+#dhcp-boot=/var/ftpd/pxelinux.0,boothost,192.168.0.3
+
+# Set the limit on DHCP leases, the default is 150
+#dhcp-lease-max=150
+
+# The DHCP server needs somewhere on disk to keep its lease database.
+# This defaults to a sane location, but if you want to change it, use
+# the line below.
+#dhcp-leasefile=/var/lib/misc/dnsmasq.leases
+
+# Set the DHCP server to authoritative mode. In this mode it will barge in
+# and take over the lease for any client which broadcasts on the network,
+# whether it has a record of the lease or not. This avoids long timeouts
+# when a machine wakes up on a new network. DO NOT enable this if there's
+# the slighest chance that you might end up accidentally configuring a DHCP
+# server for your campus/company accidentally. The ISC server uses the same
+# the same option, and this URL provides more information:
+# http://www.isc.org/index.pl?/sw/dhcp/authoritative.php
+#dhcp-authoritative
+
+# Run an executable when a DHCP lease is created or destroyed.
+# The arguments sent to the script are "add" or "del", 
+# then the MAC address, the IP address and finally the hostname
+# if there is one. 
+#dhcp-script=/bin/echo
+
+# Set the cachesize here.
+#cache-size=150
+
+# If you want to disable negative caching, uncomment this.
+#no-negcache
+
+# Normally responses which come form /etc/hosts and the DHCP lease
+# file have Time-To-Live set as zero, which conventionally means
+# do not cache further. If you are happy to trade lower load on the
+# server for potentially stale date, you can set a time-to-live (in
+# seconds) here.
+#local-ttl=
+
+# If you want dnsmasq to detect attempts by Verisign to send queries
+# to unregistered .com and .net hosts to its sitefinder service and
+# have dnsmasq instead return the correct NXDOMAIN response, uncomment
+# this line. You can add similar lines to do the same for other
+# registries which have implemented wildcard A records.
+#bogus-nxdomain=64.94.110.11
+
+# If you want to fix up DNS results from upstream servers, use the
+# alias option. This only works for IPv4.
+# This alias makes a result of 1.2.3.4 appear as 5.6.7.8
+#alias=1.2.3.4,5.6.7.8
+# and this maps 1.2.3.x to 5.6.7.x
+#alias=1.2.3.0,5.6.7.0,255.255.255.0
+
+
+# Change these lines if you want dnsmasq to serve MX records.
+
+# Return an MX record named "maildomain.com" with target
+# servermachine.com and preference 50
+#mx-host=maildomain.com,servermachine.com,50
+
+# Set the default target for MX records created using the localmx option.
+#mx-target=servermachine.com
+
+# Return an MX record pointing to the mx-target for all local
+# machines.
+#localmx
+
+# Return an MX record pointing to itself for all local machines.
+#selfmx
+
+# Change the following lines if you want dnsmasq to serve SRV
+# records.  These are useful if you want to serve ldap requests for
+# Active Directory and other windows-originated DNS requests.
+# See RFC 2782.
+# You may add multiple srv-host lines.
+# The fields are <name>,<target>,<port>,<priority>,<weight>
+# If the domain part if missing from the name (so that is just has the
+# service and protocol sections) then the domain given by the domain=
+# config option is used. (Note that expand-hosts does not need to be
+# set for this to work.)
+
+# A SRV record sending LDAP for the example.com domain to
+# ldapserver.example.com port 289
+#srv-host=_ldap._tcp.example.com,ldapserver.example.com,389
+
+# A SRV record sending LDAP for the example.com domain to
+# ldapserver.example.com port 289 (using domain=)
+#domain=example.com
+#srv-host=_ldap._tcp,ldapserver.example.com,389
+
+# Two SRV records for LDAP, each with different priorities
+#srv-host=_ldap._tcp.example.com,ldapserver.example.com,389,1
+#srv-host=_ldap._tcp.example.com,ldapserver.example.com,389,2
+
+# A SRV record indicating that there is no LDAP server for the domain
+# example.com
+#srv-host=_ldap._tcp.example.com
+
+# The following line shows how to make dnsmasq serve an arbitrary PTR
+# record. This is useful for DNS-SD. (Note that the
+# domain-name expansion done for SRV records _does_not
+# occur for PTR records.)
+#ptr-record=_http._tcp.dns-sd-services,"New Employee Page._http._tcp.dns-sd-services"
+
+# Change the following lines to enable dnsmasq to serve TXT records.
+# These are used for things like SPF and zeroconf. (Note that the
+# domain-name expansion done for SRV records _does_not
+# occur for TXT records.)
+
+#Example SPF.
+#txt-record=example.com,"v=spf1 a -all"
+
+#Example zeroconf
+#txt-record=_http._tcp.example.com,name=value,paper=A4
+
+
+# For debugging purposes, log each DNS query as it passes through
+# dnsmasq.
+#log-queries
+
+# Log lots of extra information about DHCP transactions.
+#log-dhcp
+
+# Include a another lot of configuration options.
+#conf-file=/etc/dnsmasq.more.conf
+#conf-dir=/etc/dnsmasq.d
diff -r 332407a047fd overlay.xenrt/etc/exports
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/exports	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,3 @@
+/usr/share/xenrt/images *(sync,ro,no_root_squash)
+/local/scratch/nfs *(sync,rw,no_root_squash)
+/local/inputs/linux *(sync,ro,no_root_squash)
diff -r 332407a047fd overlay.xenrt/etc/fstab
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/fstab	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,7 @@
+/dev/@OVA_ROOT_DEVICE@1	/		ext3	defaults	1  1
+/dev/@XENRT_DATA_DEVICE@	/local		ext3	defaults	1  1
+/dev/@XENRT_SWAP_DEVICE@	swap		swap	defaults	1  1
+none		/dev/pts	devpts	defaults	0  0
+none		/dev/shm	tmpfs	defaults	0  0
+none		/proc		proc	defaults	0  0
+none		/sys		sysfs	defaults	0  0
diff -r 332407a047fd overlay.xenrt/etc/init.d/ipsetup
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/init.d/ipsetup	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,135 @@
+#!/usr/bin/python
+
+# chkconfig: 12345 99 01
+# description: configure system at first boot
+
+import string, xml.dom.minidom, os, sys
+
+# Functions
+def convertint(ip):
+    # Convert the string ip into an integer
+    ipq = string.split(ip,".",3)
+    shift = 24
+    result = 0
+
+    for q in ipq:
+        # Convert to an int
+        qi = int(q)
+        # Shift the appropriate number of bits
+        qi = qi << shift
+        shift -= 8
+        # Add to the result
+        result += qi
+
+    return result
+
+def convertstring(ip):
+    # Convert the integer ip into a string
+    o3 = str(ip & 0xff)
+    o2 = str((ip & 0xff00) >> 8)
+    o1 = str((ip & 0xff0000) >> 16)
+    o0 = str((ip & 0xff000000) >> 24)
+    return o0 + "." + o1 + "." + o2 + "." + o3
+
+def makeElement(dom, elem, value):
+    # Make an element
+    el = dom.createElement(elem)
+    no = dom.createTextNode(value)
+    el.appendChild(no)
+    return el
+
+if sys.argv[1] != "start":
+    sys.exit(1)
+
+print ""
+ip = raw_input("Please specify an IP address for this host: ")
+snet = raw_input("Please specify the subnet mask: ")
+
+# Convert IP and subnet mask into hex
+ip_int = convertint(ip)
+snet_int = convertint(snet)
+
+# Do a bitwise AND to get the network address
+net_int = ip_int & snet_int
+net = convertstring(net_int)
+
+# Now work out the broadcast address
+bcast_int = net_int | (~snet_int)
+bcast = convertstring(bcast_int)
+
+# Now decide what range of addresses to use for the pool
+last_int = bcast_int - 1
+first_int = ip_int + 20
+last = convertstring(last_int)
+first = convertstring(first_int)
+
+print "Network Configuration"
+print "====================="
+print "Network Address: " + net + ", Subnet Mask: " + snet
+print "Controller IP: " + ip
+print "DHCP Pool Start: " + first + ", Finish: " + last
+print ""
+
+# Now write out configs
+ifcfg = """DEVICE=eth0
+BOOTPROTO=static
+ONBOOT=yes
+TYPE=ethernet
+IPADDR=%s
+NETMASK=%s
+NETWORK=%s
+BROADCAST=%s""" % (ip,snet,net,bcast)
+
+f = open('/etc/sysconfig/network-scripts/ifcfg-eth0', 'w')
+f.write(ifcfg)
+f.close()
+
+print "ifcfg-eth0 written"
+
+# Now write out the XenRT config
+
+# Read in sample config
+dom = xml.dom.minidom.parse("/home/xenrtd/xenrt.hg/examples/site.xml.in")
+
+# Add network settings
+net_elem = makeElement(dom,"SUBNET",net)
+snet_elem = makeElement(dom,"SUBNETMASK",snet)
+gw_elem = makeElement(dom,"GATEWAY",ip)
+start_elem = makeElement(dom,"POOLSTART",first)
+end_elem = makeElement(dom,"POOLEND",last)
+ns_elem = makeElement(dom,"NAMESERVERS",ip)
+
+df = dom.createElement("DEFAULT")
+df.appendChild(net_elem)
+df.appendChild(snet_elem)
+df.appendChild(gw_elem)
+df.appendChild(start_elem)
+df.appendChild(end_elem)
+df.appendChild(ns_elem)
+
+nc = dom.createElement("NETWORK_CONFIG")
+nc.appendChild(df)
+
+xenrt = dom.getElementsByTagName("xenrt")[0]
+xenrt.appendChild(nc)
+
+# Write out
+f = file("/etc/xenrt/site.xml", "w")
+dom.writexml(f, addindent="  ", newl="\n")
+f.close()
+os.popen("chown xenrtd:xenrtd /etc/xenrt/site.xml")
+
+print "site.xml written"
+
+os.popen("/sbin/chkconfig ipsetup off")
+
+# Now launch the network stack
+pipe = os.popen("/etc/init.d/network restart")
+while True:
+    line = pipe.readline()
+    if not line:
+        break
+    print string.strip(line)
+pipe.close()
+
+print "*** Configuration complete - continuing normal boot..."
diff -r 332407a047fd overlay.xenrt/etc/init.d/rootpassword
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/init.d/rootpassword	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,33 @@
+#!/bin/bash
+
+# chkconfig: 12345 99 01
+# description: configure system at first boot
+
+if [ "$1" != "start" ] ; then
+    exit
+fi
+
+# Rerun ourselves via initlog
+if [ -z '$IN_INITLOG' -a -x /sbin/initlog ]; then
+    exec /sbin/initlog -r "/etc/init.d/rootpassword start"
+fi
+
+. /etc/init.d/functions
+
+echo $"Configuring @PRODUCT_BRAND@ @PRODUCT_VERSION@-@BUILD_NUMBER@ XenRT:"
+echo $"(This will only appear the first time you boot this guest.)"
+
+# root password only if in interactive mode:
+if ! grep -q "noninteractive" /proc/cmdline ; then
+    echo $""
+    echo $"Please specify a root password:"
+    while ! passwd ; do : ; done
+
+#    echo $""
+#    echo $"Please specify a VNC password:"
+#    while ! vncpasswd /etc/vncpass ; do : ; done
+fi
+
+success 
+
+/sbin/chkconfig rootpassword off
diff -r 332407a047fd overlay.xenrt/etc/rc.local
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/rc.local	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,35 @@
+#!/bin/bash
+
+touch /etc/boottime.stamp
+
+/sbin/update-issue
+
+#don't show firewall messages on the console
+echo 4 > /proc/sys/kernel/printk
+
+# Start up DNS server
+dnsmasq
+
+sysctl -q -w vm.dirty_ratio=5 
+
+if [ ! -e /.configdone ]; then
+    mkdir -p /local/apt-cache/private
+    mkdir -p /local/apt-cache/tmp
+    mkdir -p /local/apt-cache/import
+    mkdir -p /local/apt-cache/packages
+    mkdir -p /local/apt-cache/headers
+    mkdir -p /local/scratch
+    mkdir -p /local/inputs/windows
+    mkdir -p /local/inputs/linux
+    mkdir -p /local/inputs/linux/distros
+    chown xenrtd -R /local
+    mkdir -p /var/log/httpd/apt-cache
+    chown xenrtd /var/log/httpd/apt-cache
+    chmod 755 /var/log/httpd
+    sudo -u postgres createuser --createdb --adduser xenrtd
+    sudo -u xenrtd createdb xenrt
+    echo "host xenrt xenrtd 127.0.0.1 255.255.255.255 trust" >> /var/lib/pgsql/data/pg_hba.conf
+    /etc/init.d/postgresql restart
+    touch /.configdone
+fi
+
diff -r 332407a047fd overlay.xenrt/etc/resolv.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/resolv.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,1 @@
+nameserver 127.0.0.1
diff -r 332407a047fd overlay.xenrt/etc/sysconfig/network
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/sysconfig/network	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,2 @@
+NETWORKING=yes
+HOSTNAME=localhost.localdomain
diff -r 332407a047fd overlay.xenrt/etc/sysconfig/network-scripts/ifcfg-eth0
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/sysconfig/network-scripts/ifcfg-eth0	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,4 @@
+DEVICE=eth0
+BOOTPROTO=dhcp
+ONBOOT=no
+TYPE=ethernet
diff -r 332407a047fd overlay.xenrt/etc/tftpremap
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/etc/tftpremap	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,3 @@
+re bootmgr\.exe xenrt/native/bootmgr.exe
+rg \\Boot\\ xenrt/native/
+rg \\boot\\ xenrt/native/
diff -r 332407a047fd overlay.xenrt/root/README.ExternalModules
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/root/README.ExternalModules	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,92 @@
+Extra kernel modules should be provided as an SRPM.
+
+The spec file should expect to be passed two variables (via the
+rpmbuild --define command line option).
+
+kernel_version -- the version of the kernel RPM to build against
+	e.g. The kernel-xen-2.6.16.33-xs0.4.0.316.3686.i686.rpm RPM
+	gives kernel_version of "2.6.16.33-xs0.4.0.316.3686".
+
+flavour -- the flavour of kernel to build against. e.g. The
+	kernel-xen-2.6.16.33-xs0.4.0.316.3686.i686.rpm RPM gives
+	flavour of "xen". Other flavours might be "xen0" or "kdump"
+
+It should be possible to take the .src.rpm file and run the command
+	rpmbuild --define "kernel_version 2.6.16.33-xs0.4.0.316.3686" \
+		 --define "flavour xen" \
+		 --rebuild FOO.src.rpm
+
+The uname of the kernel to build against is therefore
+%{kernel_version}%{?flavour}. e.g. The uname of the kernel in the
+kernel-xen-2.6.16.33-xs0.4.0.316.3686.i686.rpm RPM is
+2.6.16.33-xs0.4.0.316.3686xen.
+
+The spec file should expect to find the kernel headers to build
+against in /lib/modules/%{uname}/build (this is the standard upstream
+location). The package should not attempt to build against the currently
+running kernel.
+
+The binary package name should be suffixed with the flavour (if
+flavour is defined) and the kernel_version -- for example
+FOO-modules-%{flavour}-%{kernel_version}. If no flavour is defined it
+should be ommited e.g. FOO-modules-%{kernel_version}.
+
+The binary package should declare that it provides
+FOO-modules-%{flavour} = %{kernel_version} and requires
+kernel-%{flavour} = %{kernel_version}. If no flavour is given this
+becomes provides foo-modules = ${kernel_version} and requires kernel =
+%{kernel_version}.
+
+An example spec file for a module which uses the standard Linux 2.6
+external module Makefile structure is given below.
+
+	%define binsuffix %{?flavour:-%{flavour}}
+	%define uname  %{kernel_version}%{?flavour}
+
+	Summary: Driver for FOO
+	Name: FOO
+	Version: 1.0
+	Revision: 1
+	License: GPL
+	Group: System Environment/Kernel
+	Source: %{name}-%{version}.tar.gz
+	BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
+
+	%description
+	FOO Linux Device Driver source.
+
+	%package modules%{binsuffix}-%{kernel_version}
+	Summary: The foo modules
+	Group: System Environment/Kernel
+	Provides: %{name}-modules%{binsuffix} = %{kernel_version}
+	Requires: kernel%{binsuffix} = %{kernel_version}
+
+	%description modules%{binsuffix}-%{kernel_version}
+	FOO Linux Device Driver modules compiled against kernel
+	version %{uname}.
+
+	%prep
+	%setup -q -n %{name}-%{version}
+
+	%build
+	%{__make} -C /lib/modules/%{uname}/build M=$(pwd) modules
+
+	%install
+	rm -rf $RPM_BUILD_ROOT
+	%{__make} -C /lib/modules/%{uname}/build M=$(pwd) INSTALL_MOD_PATH=$RPM_BUILD_ROOT modules_install
+
+	# mark modules executable so that strip-to-file can strip them
+	find $RPM_BUILD_ROOT/lib/modules/%{uname} -name "*.ko" -type f  | xargs chmod u+x
+
+	%clean
+	rm -rf $RPM_BUILD_ROOT
+
+	%post modules%{binsuffix}-%{kernel_version}
+	depmod %{uname}
+
+	%files modules%{binsuffix}-%{kernel_version}
+	%defattr(-,root,root,-)
+	/lib/modules/%{uname}/extra/*.ko
+	%doc
+
+	%changelog
diff -r 332407a047fd overlay.xenrt/root/README.RepositoryFormat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/root/README.RepositoryFormat	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,157 @@
+XENSOURCE REPOSITORY FORMAT
+===============================
+(for @PRODUCT_BRAND@ @PRODUCT_VERSION@-@BUILD_NUMBER@)
+
+The repository format described here should be used by installation sources
+and driver disks.
+
+Presence of Repositories
+------------------------
+
+Given a path, the presence of a XenSource repository is determined by
+checking for the existence of valid XS-REPOSITORY and XS-PACKAGES files.
+From a given base, that base is checked, along with the packages,
+packages.main, packages.linux, and packages.site subdirectories.  Thus, a
+typical installation point will have the following format:
+
+  xs-installation
+  +-- packages.main
+  |   +-- XS-REPOSITORY
+  |   +-- XS-PACKAGES
+  |   +-- ...
+  +-- packages.linux
+  |   +-- XS-REPOSITORY
+  |   +-- XS-PACKAGES
+  |   +-- ...
+  +-- packages.site
+  |   +-- XS-REPOSITORY
+  |   +-- XS-PACKAGES
+  |   +-- ...
+
+A typical driver disk will have the following layout:
+
+  xs-driver-disk
+  +-- XS-REPOSITORY
+  +-- XS-PACKAGES
+
+In the first example, given a path to xs-installation, the installer will
+detect the presence of three repositories.  In the second example, a single
+repository will be detected.
+
+
+Repository Meta-data
+--------------------
+
+The XS-REPOSITORY file is used to describe a XenSource-format repository.
+It has four fields, separated by newlines:
+
+   <repository id>
+   <repository name>
+   <intended target product>
+   <intended target version>
+
+Repository IDs should be alphanumeric strings that provide a machine
+identifier for the repository.  They should be unique within a target
+product and version.  Best practise is to use the form 'vendor:repository':
+XenSource repositories start with 'xs', e.g. 'xs:main' -- custom
+repositories should be 'custom:my-repo', and third-party add-ons should be
+identified as such by using an appropriate vendor string.  This will help
+avoid name clashes.
+
+Repository names are presented to the user, so should be a string that
+identifies the repository in a sensible manner so the user can confirm that
+they wish to install from it.
+
+The intended target product will be XenServer; version 3.2.0-<build>.
+
+
+Package meta-data
+-----------------
+
+The XS-PACKAGES file describes the packages in a repository, one line per
+package.  Fields are space separated.
+
+There are three types of package: tbz2 packages are bzipped tarballs that
+get extracted onto the root filesystem, driver packages are kernel modules
+that get loaded by the installer at runtime as well as being installed into
+the filesystem, and firmware packages are made available during the
+installation so that they may be loaded by udev as welle being installed
+into the target filesystem.. Firmware loading support is currently limited
+but this will be addressed in the next release. 
+
+The first three fields are mandatory: package name, package size, and
+package checksum (md5).  The fourth field is one of 'tbz2', 'driver', or
+'firmware', and this dictates the contents of the subsequent fields.
+
+tbz2 fields:
+  required/optional
+  source filename
+  destination (usually '/')i
+
+  example:
+   docs 37750 2ba1783d84d10c71f07469252c555427 tbz2 required docs.tar.bz2 /
+
+
+driver fields:
+  source filename
+  destination (${KERNEL_VERSION} will be substituted with the Xen-kernel
+        version.)
+
+  example:
+    firmware_example 77001 3452c04dfcc237cde11c63d43e97a303 driver \
+      firmware_example.ko \
+      /lib/modules/${KERNEL_VERSION}/extra/firmware_example.ko
+
+firmware fields:
+  destination filename (no path necessary - automatically prefixed with
+        /lib/firmware).
+
+  example:
+    firmware 12 6f5902ac237024bdd0c176cb93063dc4 firmware sample_firware.bin
+
+
+('\' indicates an unintended line break).
+
+
+Example files:
+--------------
+
+XS-REPOSITORY:
+- - - - - - - 
+
+    xs:main
+    Base Pack and extra driver
+    XenServer
+    3.2.0-1934
+
+XS-PACKAGES:
+- - - - - - 
+
+    storage-manager 59831 b66672f0aa681bd2b498e3d902f17c04 tbz2 required \
+             storage-manager.tar.bz2 /
+    xenagentd 2073470 9d34f795e814160a01c262be3b68f9c9 tbz2 required \
+             xenagentd.tar.bz2 /
+    docs 37750 2ba1783d84d10c71f07469252c555427 tbz2 required docs.tar.bz2 /
+    xgts-main 1133 59dda9c318f4205167350b7ed993b5cd tbz2 required \
+            xgts-main.tar.bz2 /
+    pvdrivers-win 524477 37ea0c145f5b0d7a2740ecb69d21ed52 tbz2 required \
+            pvdrivers-win.tar.bz2 /
+    dom0fs 169875708 c1a86d705915eda16cca84cccffaca9f tbz2 required \
+            dom0fs.tar.bz2 /
+
+('\' indicates an unintended line-break.)
+
+
+Notes on best practise
+----------------------
+
+If a driver disk is used, any tbz2 packages on it will also be installed to
+the target.  However, a copy of the repository will be taken so that the
+drivers can be loaded at runtime; this copy is placed into memory.
+
+Therefore, if you are constructing a driver disk that also includes
+user-space tools, if these result in a large repository it is better to
+split it up into two repositories and require that people use the
+packages.site mechanism to install your add-ons, or provide a post-install
+script to install them after-the-fact.
+
diff -r 332407a047fd overlay.xenrt/sbin/update-issue
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/overlay.xenrt/sbin/update-issue	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,13 @@
+#!/bin/bash
+
+[ -e /etc/boottime.stamp ] || touch /etc/boottime.stamp
+
+cat > $mnt/etc/issue <<EOF
+@PRODUCT_BRAND@ XenRT @PRODUCT_VERSION@-@BUILD_NUMBER@
+
+System Booted: `date -r /etc/boottime.stamp +"%F %R"`
+
+EOF
+
+exit 0
+
diff -r 332407a047fd packages.xenrt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/packages.xenrt	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,35 @@
+postgresql-python
+postgresql-server
+postgresql
+stunnel
+net-snmp
+net-snmp-utils
+nmap
+nfs-utils
+httpd
+rcs
+mkisofs
+tftp-server
+make
+gcc
+gcc-c++
+glibc-devel
+kernel-xen-devel
+kernel-kdump-devel
+xen-devel
+valgrind
+redhat-rpm-config
+xe-guest-utilities
+libxml2-devel
+python-devel
+curl-devel
+rsync
+rpm-build
+rpm-devel
+ghostscript
+mercurial
+lynx
+telnet
+strace
+tcpdump
+authd
diff -r 332407a047fd patches.xenrt/patch-etc_crontab
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_crontab	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,9 @@
+--- dom0-pure/etc/crontab	2007-08-16 14:34:47.000000000 +0000
++++ dom0-staging/etc/crontab	2007-08-16 14:36:33.000000000 +0000
+@@ -8,3 +8,6 @@
+ 02 4 * * * root run-parts /etc/cron.daily
+ 22 4 * * 0 root run-parts /etc/cron.weekly
+ 42 4 1 * * root run-parts /etc/cron.monthly
++
++*/2 * * * * xenrtd if [ -e /etc/xenrt/siteid ]; then /usr/share/xenrt/control/site-controller -d -s `cat /etc/xenrt/siteid` >> /tmp/xenrt-site-controller.log 2>&1; fi
++30 * * * * xenrtd /usr/bin/xrt -V --replay-db >> /tmp/xenrt-replay-db.log 2>&1
diff -r 332407a047fd patches.xenrt/patch-etc_httpd_conf_httpd.conf
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_httpd_conf_httpd.conf	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,40 @@
+--- dom0-pure/etc/httpd/conf/httpd.conf	2007-06-27 15:26:07.000000000 +0000
++++ dom0-staging/etc/httpd/conf/httpd.conf	2007-06-27 15:26:48.000000000 +0000
+@@ -227,8 +227,8 @@
+ #  when the value of (unsigned)Group is above 60000; 
+ #  don't use Group #-1 on these systems!
+ #
+-User apache
+-Group apache
++User xenrtd
++Group xenrtd
+ 
+ ### Section 2: 'Main' server configuration
+ #
+@@ -316,14 +316,14 @@
+ # http://httpd.apache.org/docs/2.2/mod/core.html#options
+ # for more information.
+ #
+-    Options Indexes FollowSymLinks
++    Options Indexes FollowSymLinks ExecCGI
+ 
+ #
+ # AllowOverride controls what directives may be placed in .htaccess files.
+ # It can be "All", "None", or any combination of the keywords:
+ #   Options FileInfo AuthConfig Limit
+ #
+-    AllowOverride None
++    AllowOverride All
+ 
+ #
+ # Controls who can get stuff from this server.
+@@ -580,6 +580,9 @@
+ # Example:
+ # Redirect permanent /foo http://www.example.com/bar
+ 
++RewriteEngine on
++RewriteRule ^/$ /share/control/ [R]
++
+ #
+ # Directives controlling the display of server-generated directory listings.
+ #
diff -r 332407a047fd patches.xenrt/patch-etc_modprobe.d_modprobe.conf.dist
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_modprobe.d_modprobe.conf.dist	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,11 @@
+--- /etc/modprobe.d/modprobe.conf.dist.orig	2007-06-21 05:52:23.000000000 -0400
++++ /etc/modprobe.d/modprobe.conf.dist	2007-06-21 05:51:07.000000000 -0400
+@@ -42,7 +42,7 @@
+ alias char-major-9-* st
+ alias char-major-10-2 msbusmouse
+ alias char-major-10-3 atixlmouse
+-alias char-major-10-135 rtc
++alias char-major-10-135 off
+ alias char-major-10-139 openprom
+ alias char-major-10-157 applicom
+ alias char-major-10-175 agpgart
diff -r 332407a047fd patches.xenrt/patch-etc_redhat_release
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_redhat_release	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,5 @@
+--- dom0-pure/etc/redhat-release	2006-03-08 22:35:49.000000000 -0500
++++ dom0-staging/etc/redhat-release	2006-09-23 06:18:59.000000000 -0400
+@@ -1 +1 @@
+-CentOS release 5 (Final)
++@PRODUCT_BRAND@ XenRT release @PRODUCT_VERSION@-@BUILD_NUMBER@ (@PRODUCT_NAME@)
diff -r 332407a047fd patches.xenrt/patch-etc_sudoers
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_sudoers	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,8 @@
+--- dom0-pure/etc/sudoers	2007-06-27 15:22:25.000000000 +0000
++++ dom0-staging/etc/sudoers	2007-06-27 15:22:31.000000000 +0000
+@@ -92,3 +92,5 @@
+ ## Allows members of the users group to shutdown this system
+ # %users  localhost=/sbin/shutdown -h now
+ 
++xenrtd ALL=(ALL)	NOPASSWD: ALL
++
diff -r 332407a047fd patches.xenrt/patch-etc_xinetd.d_auth
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_xinetd.d_auth	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,17 @@
+--- dom0-pure/etc/xinetd.d/auth	2007-08-07 15:15:09.000000000 +0000
++++ dom0-staging/etc/xinetd.d/auth	2007-08-07 15:15:29.000000000 +0000
+@@ -8,12 +8,12 @@
+ # SPAM HARVESTERS) BEFORE RUNNING THIS DAEMON WITH NO ARGUMENTS.
+ service auth
+ {
+-        disable         = yes
++        disable         = no
+         socket_type     = stream
+         wait            = no
+         user            = ident
+         cps             = 4096 10
+         instances       = UNLIMITED
+         server          = /usr/sbin/in.authd
+-        server_args     = -t60 --xerror --os -E
++        server_args     = -t60 --xerror --os
+ }
diff -r 332407a047fd patches.xenrt/patch-etc_xinetd.d_tftp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches.xenrt/patch-etc_xinetd.d_tftp	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,13 @@
+--- dom0-pure/etc/xinetd.d/tftp	2007-07-23 08:50:35.000000000 +0000
++++ dom0-staging/etc/xinetd.d/tftp	2007-07-23 08:50:56.000000000 +0000
+@@ -10,8 +10,8 @@
+ 	wait			= yes
+ 	user			= root
+ 	server			= /usr/sbin/in.tftpd
+-	server_args		= -s /tftpboot
+-	disable			= yes
++	server_args		= -s /tftpboot -v -v -v -m /etc/tftpremap
++	disable			= no
+ 	per_source		= 11
+ 	cps			= 100 2
+ 	flags			= IPv4
diff -r 332407a047fd xenrt.ova.xml.in
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/xenrt.ova.xml.in	Fri Feb 05 13:20:43 2010 +0000
@@ -0,0 +1,19 @@
+<?xml version="1.0" ?>
+<appliance version="0.1">
+        <vm name="vm">
+                <label>
+                        @PRODUCT_BRAND@ XenRT @PRODUCT_VERSION@-@BUILD_NUMBER@
+                </label>
+                <shortdesc>
+			
+                </shortdesc>
+                <config mem_set="@OVA_MEM@" vcpus="1"/>
+        <hacks is_hvm="false"/>
+                <vbd device="@OVA_ROOT_DEVICE@" function="root" mode="w" vdi="vdi_@OVA_ROOT_DEVICE@"/>
+                <vbd device="@XENRT_SWAP_DEVICE@" function="swap" mode="w" vdi="vdi_@XENRT_SWAP_DEVICE@"/>
+                <vbd device="@XENRT_DATA_DEVICE@" function="data" mode="w" vdi="vdi_@XENRT_DATA_DEVICE@"/>
+        </vm>
+        <vdi name="vdi_@OVA_ROOT_DEVICE@" size="@OVA_DISK@" source="file://@OVA_ROOT_DEVICE@" type="dir-gzipped-chunks" variety="system"/>
+        <vdi name="vdi_@XENRT_SWAP_DEVICE@" size="@XENRT_DISK_SWAP@" source="file://@XENRT_SWAP_DEVICE@" type="dir-gzipped-chunks" variety="system"/>
+        <vdi name="vdi_@XENRT_DATA_DEVICE@" size="@XENRT_DISK_DATA@" source="file://@XENRT_DATA_DEVICE@" type="dir-gzipped-chunks" variety="system"/>
+</appliance>
