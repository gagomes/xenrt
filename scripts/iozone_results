#!/bin/bash
set -x
#
# XenRT: Xen Regression Testing
#
# (C) Xensource, 2006
# Karl Spalding, November 2006

# Specify the file sizes and record sizes to average over here.
# Leaving these values blank results an average over all values.
FILE_SIZES=""
RECORD_SIZES=""

# Specify the column with -c, the file sizes with -s and the record
# sizes with -r.
average() {
    while getopts ":c:s:r:" OPTIONS; do
        case ${OPTIONS} in
            c ) COL=${OPTARG};;
            s ) SIZES=${OPTARG};;
            r ) RECORDS=${OPTARG};;
        esac
    done
    # Format the sizes and records for use in a regexp.
    SIZES=`echo ${SIZES} | sed -e 's/ /\\\\|/g'`
    RECORDS=`echo ${RECORDS} | sed -e 's/ /\\\\|/g'`
    SUM=0
    COUNT=0
    # Ignore any lines which are blank or contain letters.
    # Grep out the specified sizes and records.
    # Print the specified column.
    for LINE in `cat ${LOGFILE} | grep -v [a-zA-Z] |\
         grep -v ^$ |\
         grep "^[[:space:]]*\(${SIZES}\)" |\
         grep "^[[:space:]]*[0-9]*[[:space:]]*\(${RECORDS}\)" |\
         awk "{ print \\$${COL} }"`; do
        # Keep a running total of a column.
        SUM=$[ ${SUM} + ${LINE} ]
        # Keep a count of the number of entries in a column.
        COUNT=$[ ${COUNT} + 1 ]
    done
    # Echo the average in Mb/s.
    echo `echo "scale=2; ${SUM} / ${COUNT} / 1024" | bc` 
}

do_awk() {
    local KEY=$1
    awk "BEGIN{c=0}{if(/Children.* ${KEY}/){c=1} else if(/Children/){c=0} else if(c==1 && /Avg/){print \$6}}" ${LOGFILE}
}

get() {
    local LABEL=${1}
    local KEY=${2}
    local V=`do_awk "${KEY}"`
    if [ -n "${V}" ]; then
	echo "Value: ${LABEL} ${V} kb/s"
    else
	echo "Comment: No value found for ${LABEL} - ${KEY}"
    fi
}

LOGFILE=${1}

if grep -q "Throughput test" ${LOGFILE}; then
    get Initial_writer_throughput 'initial'
    get Rewriter_throughput 'rewriters'
    get Reader_throughput '[[:digit:]]+ readers'
    get Rereader_throughput 're-readers'
    get Reverse_reader_throughput 'reverse'
    get Random_reader_throughput 'random readers'
    get Stride_reader_throughput 'stride readers'
    get Mixed_throughput 'mixed'
    get Random_writer_throughput 'random writers'
    get Pwrite_throughput 'pwrite'
    get Pread_throughput 'pread'
else
    # Pretty print the case where we use all the data.
    if [ -z "${FILE_SIZES}" ]; then
        FO="All"
    else
        FO=${FILE_SIZES}
    fi
    if [ -z "${RECORD_SIZES}" ]; then
        RO="All"
    else
        RO=${RECORD_SIZES}
    fi

    # Comment out any values which we don't want.
    echo Comment: Averaging over \(${FO}\) file sizes and \(${RO}\) record sizes \(Mb/s\).
    # Writing to a new file.
    echo Value: WRT_NEW `average -c 3 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Writing to an existing file.
    echo Value: WRT_EXST `average -c 4 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Reading from an existing file.
    echo Value: RD_EXST `average -c 5 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Reading from a recently read file.
    echo Value: RD_REC `average -c 6 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Random read from a file.
    echo Value: RD_RAND `average -c 7 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Random write to a file.
    echo Value: WRT_RAND `average -c 8 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Reading a file backwards.
    echo Value: RD_BACK `average -c 9 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Rewriting a record.
    echo Value: RE_WRT `average -c 10 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Reading with strided access.
    echo Value: RD_STRD `average -c 11 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Writing a new file with fwrite.
    echo Value: FWR_NEW `average -c 12 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Rewriting a file with fwrite.
    echo Value: RE_FWR `average -c 13 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Reading a file with fread.
    echo Value: FREAD `average -c 14 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
    # Rereading a file with fread.
    echo Value: RE_FREAD `average -c 15 -s "${FILE_SIZES}" -r "${RECORD_SIZES}"` "kb/s"
fi
