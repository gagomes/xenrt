import logging
import IPy
import psycopg2
import netifaces
import threading
import time
import json
from SimpleXMLRPCServer import SimpleXMLRPCServer

from libpydhcpserver.dhcp_types.conversion import *
from dhcpdlib.databases.generic import Definition

_logger = logging.getLogger('dhcp')

class XenRTDHCPAllocator(object):
    
    def __init__(self):
        self.conn = None
        self.lock = threading.RLock()
        self.dblock = threading.RLock()
        self.interfaceInfo = {}
        with open("@sharedir@/xenrtdhcpd/xenrtdhcpd.cfg") as f:
            self.config = json.load(f)
        for i in self.config['interfaces'].keys():
            self._parseCfg(i)
            self._setupDB(i)

        self.rejectedCSAddrs = {}
        self.xmlrpc = SimpleXMLRPCServer(("localhost", 1500), allow_none=True)
        self.xmlrpc.register_introspection_functions()
        self.xmlrpc.register_instance(XMLRPCAllocator(self))
        thread = threading.Thread(target=self.startXMLRPC, name="XMLRPC")
        thread.daemon=True
        thread.start()

    def respondToCSAddr(self, mac):
        # First clean up the list of old addresses
        for a in self.rejectedCSAddrs.keys():
            if self.rejectedCSAddrs[a] > time.time() + 60:
                del self.rejectedCSAddrs[a]
        # If we've rejected it once, we can respond this time (after a 3s delay)
        return self.rejectedCSAddrs.has_key(mac)

    def startXMLRPC(self):
        _logger.info("Starting XML/RPC server")
        self.xmlrpc.serve_forever()

    def _parseCfg(self, intf):
        globalcfg = self.config['global']
        intfcfg = self.config['interfaces'][intf]
        for k in globalcfg.keys():
            if not intfcfg.has_key(k):
                intfcfg[k] = globalcfg[k]

        for k in intfcfg.keys():
            if isinstance(intfcfg[k], list):
                for i in xrange(len(intfcfg[k])):
                    if intfcfg[k][i] == "self":
                        intfcfg[k][i] = self.getInterfaceInfo(intf)['addr']
            else:
                if intfcfg[k] == "self":
                    intfcfg[k] = self.getInterfaceInfo(intf)['addr']
        
        if not intfcfg.has_key("reservations"):
            intfcfg['reservations'] = {}

        for r in intfcfg['reservations'].keys():
            addr = intfcfg['reservations'][r]
            del intfcfg['reservations'][r]
            intfcfg['reservations'][r.lower()] = addr

    def _sql(self, sql):
        with self.dblock:
            _logger.info("Executing %s" % sql)
            try:
                self.conn.cursor().execute(sql)
            except:
                _logger.info("Attempting reconnection to DB")
                self.conn = psycopg2.connect("host='127.0.0.1' dbname='dhcp' user='dhcp' password='dhcp'")
                self.conn.cursor().execute(sql)
                self.conn.commit()
            else:
                self.conn.commit()
    
    def _setupDB(self, intf):
        start = self.config['interfaces'][intf]['start']
        end = self.config['interfaces'][intf]['end']
        # 1. Delete addresses in this range that don't belong to this interface

        self._sql("DELETE FROM leases WHERE interface!='%s' AND addr>='%s' AND addr<='%s'" % (intf, start, end))

        # 2. Delete addresses outside of this range that belong to this interface
        
        self._sql("DELETE FROM leases WHERE interface='%s' AND (addr<'%s' OR addr>'%s')" % (intf, start, end))

        # 3. See what addresses we have in this range

        self._sql("SELECT addr FROM leases WHERE interface='%s'" % intf)
        existing = [x[0] for x in self.cur.fetchall()]
        # 4. Add any missing addresses

        alladdrs = [IPy.IP(x).strNormal() for x in range(IPy.IP(start).int(), IPy.IP(end).int()+1)]

        for a in alladdrs:
            if a not in existing:
                self._sql("INSERT INTO leases (addr, interface) VALUES ('%s', '%s')" % (a, intf))

    def _findStaticReservation(self, intf, mac):
        res = self.config['interfaces'][intf]['reservations']
        if mac.lower() in res.keys():
            return (res[mac.lower()]['ip'], res[mac.lower()]['name'])
        else:
            return (None, None)

    def _findActiveLease(self, intf, mac):
        self._sql("SELECT addr FROM leases WHERE mac='%s' AND interface='%s' ORDER BY expiry DESC" % (mac.lower(), intf))
        r = self.cur.fetchone()
        if r:
            _logger.info("Lease %s found for %s" % (r[0].split("#")[0].strip(), mac.lower()))
            return r[0].split("#")[0].strip()
        else:
            _logger.info("No lease found for %s" % (mac.lower()))
            return None

    def _findHostName(self, addr):
        try:
            self._sql("SELECT reservedname FROM leases WHERE addr='%s' AND reserved IS NOT NULL" % addr)
            r = self.cur.fetchone()
            if r:
                return r[0]
            else:
                return None
        except:
            return None

    def _renewLease(self, intf, mac, ip):
        intfcfg = self.config['interfaces'][intf]
        self._sql("SELECT addr FROM leases WHERE addr='%s' AND mac='%s' AND interface='%s'" % (ip, mac.lower(), intf))
        r = self.cur.fetchone()
        if not r:
            _logger.warn("Warning: could not find lease for %s" % mac.lower())
            raise Exception("Could not find lease")
        else:
            self._sql("UPDATE leases SET expiry=%d WHERE addr='%s'" % (int(time.time() + intfcfg['trueleasetime']), r[0]))

    def _blacklistIp(self, ip):
        self._sql("UPDATE leases SET mac='INVALID',expiry=%d WHERE addr='%s'" % (int(time.time() + 24*3600), ip))

    def isCloudStackMAC(self, mac):
        return mac.startswith("02:") or mac.startswith("06:")

    def _getNewLease(self, intf, mac, cs=False):
        # Exclude Cloudstack MACs
        if self.isCloudStackMAC(mac) and not cs:
            self.rejectedCSAddrs[mac] = time.time()
            return None
        intfcfg = self.config['interfaces'][intf]
        self._sql("SELECT addr FROM leases WHERE interface='%s' AND reserved IS NULL AND (mac IS NULL OR expiry<%d) ORDER BY addr LIMIT 1" % (intf, int(time.time())))
        r = self.cur.fetchone()
        if not r:
            return None
        else:
            self._sql("UPDATE leases SET expiry=%d,mac='%s',leasestart=%d WHERE addr='%s'" % (int(time.time() + intfcfg['trueleasetime']), mac.lower(), int(time.time()), r[0]))
            return r[0]
        
    def getResponse(self, intf, mac, packet):
        if packet.isDHCPDeclinePacket():
            _logger.info("Handling DECLINE - blacklisting existing IP")
            currentIp = packet.extractIPOrNone("requested_ip_address") 
            if not currentIp:
                currentIp = self._findActiveLease(intf, str(mac))
            if currentIp:
                self._blacklistIp(currentIp)
                
        ip = None
        cfg = self.config['interfaces'][intf]
        if self.isBlocked(mac):
            return None
        _logger.info("Request for MAC %s on interface %s" % (intf, mac))
        hostname = None
        (ip, hostname) = self._findStaticReservation(intf, str(mac))
        if ip:
            lease = cfg['staticleasetime']
        else:
            with self.lock:
                currentIp = self._findActiveLease(intf, str(mac))
                if currentIp:
                    try:
                        _logger.info("Renewing lease for %s" % currentIp)
                        self._renewLease(intf, str(mac), currentIp)
                        ip = currentIp
                    except:
                        _logger.warn("Warning: could not renew lease for %s" % currentIp)
                if not ip:
                    ip = self._getNewLease(intf, str(mac), cs=self.respondToCSAddr(str(mac)))
                if not ip:
                    _logger.warn("Could not allocate lease for %s on %s" % (str(mac), intf))
                    return None
                lease = cfg['clientleasetime']
        self._populatePXEInfo(packet, intf, ip)

        intfdetails = self.getInterfaceInfo(intf)
        intfaddr = IPy.IP(intfdetails['addr'])
        subnet = intfaddr.make_net(intfdetails['netmask'])[0].strNormal()

        if not hostname:
            hostname = self._findHostName(ip)

        if not hostname:
            hostname="localhost"
        #    hostname = "xenrt-%s" % ip.replace(".","-")

        ret = Definition(ip=ip,
                         lease_time=lease,
                         subnet=subnet,
                         serial=0,
                         gateway=cfg['gateway'],
                         subnet_mask = intfdetails['netmask'],
                         broadcast_address = intfdetails['broadcast'],
                         domain_name=cfg['domain'],
                         domain_name_servers = cfg['dns'],
                         ntp_servers = cfg['ntp'],
                         hostname=hostname)
        # Allow CCP to return first
        if self.isCloudStackMAC(str(mac)):
            time.sleep(3)
        return ret

    def _populatePXEInfo(self, packet, intf, ip):
        server = self.getInterfaceInfo(intf)['addr']
        userClass = packet.getOption("user_class")
        arch = None
        try:
            archOpt = packet.getOption("client_system")
            if archOpt:
                arch = listToNumber(archOpt)
        except Exception, e:
            _logger.info("Error finding client architecture" % str(e))
        if arch == 7 and self.config['interfaces'][intf].get('uefi'):
            packet.setOption("file", strToPaddedList("/EFI/%s/boot.efi" % ip, 128))
            _logger.info("Sending /%s/boot.efi as PXE file" % ip)
        elif userClass and listToStr(userClass) == "iPXE":
            packet.setOption("file", strToPaddedList("http://%s/tftp/default-ipxe.cgi" % server, 128))
            _logger.info("Sending http://%s/tftp/default-ipxe.cgi as PXE file" % server)
        else:
            override = [x.get("ipxe", False) for x in self.config['interfaces'][intf].get("reservations", {}).values() if x['ip']==ip]
            ipxeOverride = override and override[0]
            if self.config['interfaces'][intf].get('ipxe') or ipxeOverride:
                packet.setOption("file", strToPaddedList("/undionly.kpxe", 128))
                _logger.info("Sending /undionly.kpxe as PXE file")
            else:
                packet.setOption("file", strToPaddedList("/pxelinux.0", 128))
                _logger.info("Sending /pxelinux.0 as PXE file")
        packet.setOption("siaddr", ipToList(server))
   
    def getInterfaceInfo(self, intf):
        if not self.interfaceInfo.has_key(intf):
            self.interfaceInfo[intf] = netifaces.ifaddresses(intf)[netifaces.AF_INET][0]
        return self.interfaceInfo[intf]

    def reserveSingleAddress(self, intf, data, mac=None, name=None):
        with self.lock:
            self._sql("SELECT addr FROM leases WHERE interface='%s' AND reserved IS NULL AND (mac IS NULL or expiry < %d) ORDER BY addr LIMIT 1;" % (intf, int(time.time()))) 
            r = self.cur.fetchone()
            if not r:
                raise Exception("No address available")
            if mac:
                macstr = "'%s'" % mac.lower()
            else:
                macstr= "NULL"
            if name:
                namestr = "'%s'" % name
            else:
                namestr = "NULL"
            
            self._sql("UPDATE leases SET reserved='%s',reservedname=%s,mac=%s,reservedtime=%d,leasestart=%d WHERE addr='%s'" % (data, namestr, macstr, int(time.time()), int(time.time()), r[0]))

            return r[0]
        

    def reserveAddressRange(self, intf, size, data):
        with self.lock:
            res = []
            self._sql("SELECT addr FROM leases WHERE interface='%s' AND reserved IS NULL AND (mac IS NULL or expiry < %d) ORDER BY addr" % (intf, int(time.time()))) 
            rs = self.cur.fetchall()
            ips = [IPy.IP(x[0]).int() for x in rs]
            start = None
            for i in xrange(len(ips)):
                if (i + size) > len(ips):
                    break
                ok = True
                for j in xrange(size):
                    if ips[i+j] != ips[i] + j:
                        ok = False
                        break
                if ok:
                    start = ips[i]
                    break

            if not start:
                raise Exception("No address range available")

            for i in xrange(size):
                ip = IPy.IP(start + i).strNormal()
                self._sql("UPDATE leases SET reserved='%s',mac=NULL,reservedtime=%d,leasestart=%d WHERE addr='%s'" % (data, int(time.time()), int(time.time()), ip))
                res.append(ip)

            return res
    
    def updateReservation(self, addr):
        with self.lock:
            self._sql("UPDATE leases SET reservedtime=%d WHERE addr='%s'" % (int(time.time()), addr))

    def releaseAddress(self, addr):
        with self.lock:
            self._sql("UPDATE leases SET reserved=NULL WHERE addr='%s'" % (addr))

    def listReservedAddresses(self):
        with self.lock:
            self._sql("SELECT addr,reserved,reservedtime FROM LEASES WHERE reserved IS NOT NULL")
            res = [] 
            rs = self.cur.fetchall()
        for r in rs:
            res.append((r[0], r[1], r[2]))

        return res

    def isBlocked(self, mac):
        if str(mac).lower() in [x.lower() for x in self.config['global'].get("blockedmacs", [])]:
            return True
        with self.lock:
            self._sql("SELECT mac from blocks WHERE mac='%s'" % mac)
            if self.cur.fetchone():
                return True
            else:
                return False

    def listBlockedMacs(self):
        with self.lock:
            self._sql("SELECT mac,blockuser FROM blocks")
            res = []
            rs = self.cur.fetchall()
        for r in rs:
            res.append((r[0], r[1]))

    def unblockMac(self, mac):
        with self.lock:
            self._sql("DELETE from blocks WHERE mac='%s'" % mac)

    def blockMac(self, mac, data):
        with self.lock:
            self._sql("DELETE from blocks WHERE mac='%s'" % mac)
            self._sql("INSERT INTO blocks (mac, blockuser) VALUES ('%s', '%s')" % (mac, data))

class XMLRPCAllocator(object):
    def __init__(self, parent):
        self.parent = parent

    def reserveSingleAddress(self, intf, data, mac=None, name=None):
        _logger.info("Request for single address on %s with data %s" % (intf, data))
        return self.parent.reserveSingleAddress(intf, data, mac, name)

    def reserveAddressRange(self, intf, size, data):
        return self.parent.reserveAddressRange(intf, size, data)

    def releaseAddress(self, addr):
        self.parent.releaseAddress(addr)
        return True

    def releaseAddresses(self, addrs):
        for addr in addrs:
            self.parent.releaseAddress(addr)
        return True

    def updateReservation(self, addr):
        self.parent.updateReservation(addr)
        return True

    def updateReservations(self, addrs):
        for addr in addrs:
            self.parent.updateReservation(addr)
        return True

    def listReservedAddresses(self):
        return self.parent.listReservedAddresses()

    def blockMac(self, mac, data):
        self.parent.blockMac(mac, data)
        return True

    def unblockMac(self, mac):
        self.parent.unblockMac(mac)
        return True

    def listBlockedMacs(self):
        return self.parent.listBlockedMacs()
